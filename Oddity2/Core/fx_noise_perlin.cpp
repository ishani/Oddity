/*
  .oooooo.         .o8        .o8   o8o      .               
 d8P'  `Y8b       "888       "888   `"'    .o8               
888      888  .oooo888   .oooo888  oooo  .o888oo oooo    ooo 
888      888 d88' `888  d88' `888  `888    888    `88.  .8'  
888      888 888   888  888   888   888    888     `88..8'   
`88b    d88' 888   888  888   888   888    888 .    `888'    
 `Y8bood8P'  `Y8bod88P" `Y8bod88P" o888o   "888"     .8'  2.0
                                                 .o..P'      
                                                 `Y8P'       
                                                             
*/

#include "fx_noise_perlin.h"

static const int32_t sPerlinPermutation[512] __IN_FLASH__ = {
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,
    8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117,
    35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71,
    134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41,
    55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89,
    18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217,
    226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58,
    17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155,
    167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218,
    246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,
    14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4,
    150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,

    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,
    8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117,
    35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71,
    134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41,
    55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89,
    18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217,
    226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58,
    17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155,
    167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218,
    246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,
    14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4,
    150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
};

//----------------------------------------------------------------------------------------------------------------------
static inline fix16_t
grad2( const int32_t hash, const fix16_t x, const fix16_t y )
{
    static const fix16_t g2[4][2] = {
        { 0x00010000, 0x00000000 },
        { 0xffff0000, 0x00000000 },
        { 0x00000000, 0x00010000 },
        { 0x00000000, 0xffff0000 },    // center of square to edges
    };

    const int     h  = hash & 0x3;
    const fix16_t _x = g2[h][0];
    const fix16_t _y = g2[h][1];

    return fix16_add( fix16_mul( x, _x ), fix16_mul( y, _y ) );
}

static inline fix16_t
p3deriv( const fix16_t t )
{
    const fix16_t inner = fix16_sub( t, c_f16_2 );
    const fix16_t outer = fix16_add( fix16_mul( t, inner ), fix16_one );

    return fix16_mul( fix16_mul( fix16_mul( c_f16_30, t ), t ), outer );
}

static inline fix16_t
p3fade( const fix16_t t )
{
    const fix16_t inner = fix16_sub( fix16_mul( t, c_f16_6 ), c_f16_15 );
    const fix16_t outer = fix16_add( fix16_mul( t, inner ), c_f16_10 );

    return fix16_mul( fix16_mul( fix16_mul( t, t ), t ), outer );
}

static const fix16_t fix16_1_over_1414 = 0x0000b50c;

//----------------------------------------------------------------------------------------------------------------------
fix16_t
fx_noise_perlin2( fix16_t x, fix16_t y )
{
    int32_t A, B;
    fix16_t u, v;

    // find unit cube for point
    int16_t gridX = fix16_floor_to_int( x ) & 255,
            gridY = fix16_floor_to_int( y ) & 255;

    x = fix16_fract( x );
    y = fix16_fract( y );

    // fade curves for x,y
    u = p3fade( x );
    v = p3fade( y );

    // hash coordinates of the 4 square corners.
    A = sPerlinPermutation[gridX] + gridY;
    B = sPerlinPermutation[gridX + 1] + gridY;

    // add blended results from eight corners of the cube
    fix16_t result = p3lerp( v, 
                        p3lerp( u, 
                          grad2( sPerlinPermutation[A], x, y ), 
                          grad2( sPerlinPermutation[B], x - fix16_one, y ) ),
                             p3lerp( u, 
                                grad2( sPerlinPermutation[A + 1], x, y - fix16_one ),
                                grad2( sPerlinPermutation[B + 1], x - fix16_one, y - fix16_one ) ) );

    // output range [-sqrt(n)/2, sqrt(n)/2], where n is the dimensionality
    // shift it to 0..1
    result = fix16_mul( fix16_add( result, c_f16_pt_707 ), fix16_1_over_1414 );

    return result;
}

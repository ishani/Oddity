
badge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  00000f9a  0000102e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  008001fa  008001fa  00001128  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000026e  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a13  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ad  00000000  00000000  00001de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ae8  00000000  00000000  00002196  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030a  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000475  00000000  00000000  0000319a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000360f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 3f       	cpi	r26, 0xFA	; 250
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	aa ef       	ldi	r26, 0xFA	; 250
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <main>
  9e:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ioinit>:
void ioinit (void)
{
	// 1 = output, 0 = input
	// pins are inputs, except defined outputs
#if BOARD_REV_1
	DDRB = CLK | OSCO;
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	84 b9       	out	0x04, r24	; 4
	DDRD = CS | RESET | TXD | DOUT;
  aa:	82 ee       	ldi	r24, 0xE2	; 226
  ac:	8a b9       	out	0x0a, r24	; 10

#if 0 // error in i2c pins?
	DDRC  = 0b00000011;
	PORTC = 0b00000011;  	// set SDA & SCL high
#else
	DDRC = SDA | SCL;
  ae:	80 e3       	ldi	r24, 0x30	; 48
  b0:	87 b9       	out	0x07, r24	; 7
	DDRC = SDA | SCL;	// set SDA & SCL high
  b2:	87 b9       	out	0x07, r24	; 7
#endif	

	//USART Baud rate: 9600
	UBRR0H = (MYUBRR) >> 8;
  b4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = MYUBRR;
  b8:	83 e3       	ldi	r24, 0x33	; 51
  ba:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	80 93 c1 00 	sts	0x00C1, r24
	
	stdout = &mystdout; //Required for printf init
  c4:	8c ee       	ldi	r24, 0xEC	; 236
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	90 93 25 02 	sts	0x0225, r25
  cc:	80 93 24 02 	sts	0x0224, r24

	PORTD = 0x00;
  d0:	1b b8       	out	0x0b, r1	; 11
	PORTD |= CS;
  d2:	5e 9a       	sbi	0x0b, 6	; 11
}
  d4:	08 95       	ret

000000d6 <delay_ms>:

//General short delays
void delay_ms(uint16_t x)
{
  d6:	0e c0       	rjmp	.+28     	; 0xf4 <delay_ms+0x1e>
#if !DEBUG_NO_DELAY
  uint16_t y;
  uint8_t z;
  for ( ; x > 0 ; x--){
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
	...
#if NO_DIV8
	for ( y = 0 ; y < 11 ; y++){
#else
    for ( y = 0 ; y < 90 ; y++){
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	2a 35       	cpi	r18, 0x5A	; 90
  ee:	31 05       	cpc	r19, r1
  f0:	a9 f7       	brne	.-22     	; 0xdc <delay_ms+0x6>
void delay_ms(uint16_t x)
{
#if !DEBUG_NO_DELAY
  uint16_t y;
  uint8_t z;
  for ( ; x > 0 ; x--){
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	00 97       	sbiw	r24, 0x00	; 0
  f6:	81 f7       	brne	.-32     	; 0xd8 <delay_ms+0x2>
        asm volatile ("nop");
      }
    }
  }
#endif
}
  f8:	08 95       	ret

000000fa <displaySetBrightness>:
}

void displaySetBrightness(int brightness)
{

}
  fa:	08 95       	ret

000000fc <displayWriteEight>:
5) Take CLK low.
*/
void displayWriteEight(uint8_t data)
{
#if BOARD_REV_1
	PORTB &= ~CLK; // take clk low
  fc:	2a 98       	cbi	0x05, 2	; 5
	DELAY();
  fe:	00 00       	nop
	PORTD &= ~CS;  // take cs low
 100:	5e 98       	cbi	0x0b, 6	; 11
	DELAY();
 102:	00 00       	nop
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	for(i = 0; i < 8; ++i)
	{
		uint8_t mask = 0b10000000;
		PORTB &= ~CLK; // take clk low
 108:	2a 98       	cbi	0x05, 2	; 5
		if(mask & data)		// set the bit
 10a:	87 ff       	sbrs	r24, 7
 10c:	02 c0       	rjmp	.+4      	; 0x112 <displayWriteEight+0x16>
			PORTD |= DOUT;
 10e:	5f 9a       	sbi	0x0b, 7	; 11
 110:	01 c0       	rjmp	.+2      	; 0x114 <displayWriteEight+0x18>
		else
			PORTD &= ~DOUT;
 112:	5f 98       	cbi	0x0b, 7	; 11
		data = data << 1;
		DELAY();
 114:	00 00       	nop
		PORTB |= CLK; // take clk high
 116:	2a 9a       	sbi	0x05, 2	; 5
		DELAY();
 118:	00 00       	nop
	PORTB &= ~CLK; // take clk low
	DELAY();
	PORTD &= ~CS;  // take cs low
	DELAY();
	int i;
	for(i = 0; i < 8; ++i)
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	28 30       	cpi	r18, 0x08	; 8
 120:	31 05       	cpc	r19, r1
 122:	11 f0       	breq	.+4      	; 0x128 <displayWriteEight+0x2c>
		PORTB &= ~CLK; // take clk low
		if(mask & data)		// set the bit
			PORTD |= DOUT;
		else
			PORTD &= ~DOUT;
		data = data << 1;
 124:	88 0f       	add	r24, r24
 126:	f0 cf       	rjmp	.-32     	; 0x108 <displayWriteEight+0xc>
		DELAY();
		PORTB |= CLK; // take clk high
		DELAY();
	}
	PORTD |= CS;  // take cs high
 128:	5e 9a       	sbi	0x0b, 6	; 11
	DELAY();
 12a:	00 00       	nop
	PORTB &= ~CLK; // take clk low
 12c:	2a 98       	cbi	0x05, 2	; 5
	DELAY();
 12e:	00 00       	nop
	PORTD |= CS;  // take cs high
	DELAY();
	PORTD &= ~CLK; // take clk low
	DELAY();
#endif
}
 130:	08 95       	ret

00000132 <displayWriteSixteen>:

void displayWriteSixteen(uint8_t high, uint8_t low)
{
#if BOARD_REV_1
	PORTB &= ~CLK; // take clk low
 132:	2a 98       	cbi	0x05, 2	; 5
	DELAY();
 134:	00 00       	nop
	PORTD &= ~CS;  // take cs low
 136:	5e 98       	cbi	0x0b, 6	; 11
	DELAY();
 138:	00 00       	nop
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	for(i = 0; i < 8; ++i)
	{
		uint8_t mask = 0b10000000;
		PORTB &= ~CLK; // take clk low
 13e:	2a 98       	cbi	0x05, 2	; 5
		if(mask & high)		// set the bit
 140:	87 ff       	sbrs	r24, 7
 142:	02 c0       	rjmp	.+4      	; 0x148 <displayWriteSixteen+0x16>
			PORTD |= DOUT;
 144:	5f 9a       	sbi	0x0b, 7	; 11
 146:	01 c0       	rjmp	.+2      	; 0x14a <displayWriteSixteen+0x18>
		else
			PORTD &= ~DOUT;
 148:	5f 98       	cbi	0x0b, 7	; 11
		high = high << 1;
		DELAY();
 14a:	00 00       	nop
		PORTB |= CLK; // take clk high
 14c:	2a 9a       	sbi	0x05, 2	; 5
		DELAY();
 14e:	00 00       	nop
	PORTB &= ~CLK; // take clk low
	DELAY();
	PORTD &= ~CS;  // take cs low
	DELAY();
	int i;
	for(i = 0; i < 8; ++i)
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	28 30       	cpi	r18, 0x08	; 8
 156:	31 05       	cpc	r19, r1
 158:	11 f0       	breq	.+4      	; 0x15e <displayWriteSixteen+0x2c>
		PORTB &= ~CLK; // take clk low
		if(mask & high)		// set the bit
			PORTD |= DOUT;
		else
			PORTD &= ~DOUT;
		high = high << 1;
 15a:	88 0f       	add	r24, r24
 15c:	f0 cf       	rjmp	.-32     	; 0x13e <displayWriteSixteen+0xc>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
		DELAY();
	}
	for(i = 0; i < 8; ++i)
	{
		uint8_t mask = 0b10000000;
		PORTB &= ~CLK; // take clk low
 162:	2a 98       	cbi	0x05, 2	; 5
		if(mask & low)		// set the bit
 164:	67 ff       	sbrs	r22, 7
 166:	02 c0       	rjmp	.+4      	; 0x16c <displayWriteSixteen+0x3a>
			PORTD |= DOUT;
 168:	5f 9a       	sbi	0x0b, 7	; 11
 16a:	01 c0       	rjmp	.+2      	; 0x16e <displayWriteSixteen+0x3c>
		else
			PORTD &= ~DOUT;
 16c:	5f 98       	cbi	0x0b, 7	; 11
		low = low << 1;
		DELAY();
 16e:	00 00       	nop
		PORTB |= CLK; // take clk high
 170:	2a 9a       	sbi	0x05, 2	; 5
		DELAY();
 172:	00 00       	nop
		high = high << 1;
		DELAY();
		PORTB |= CLK; // take clk high
		DELAY();
	}
	for(i = 0; i < 8; ++i)
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	88 30       	cpi	r24, 0x08	; 8
 178:	91 05       	cpc	r25, r1
 17a:	11 f0       	breq	.+4      	; 0x180 <displayWriteSixteen+0x4e>
		PORTB &= ~CLK; // take clk low
		if(mask & low)		// set the bit
			PORTD |= DOUT;
		else
			PORTD &= ~DOUT;
		low = low << 1;
 17c:	66 0f       	add	r22, r22
 17e:	f1 cf       	rjmp	.-30     	; 0x162 <displayWriteSixteen+0x30>
		DELAY();
		PORTB |= CLK; // take clk high
		DELAY();
	}
	PORTD |= CS;  // take cs high
 180:	5e 9a       	sbi	0x0b, 6	; 11
	DELAY();
 182:	00 00       	nop
	PORTB &= ~CLK; // take clk low
 184:	2a 98       	cbi	0x05, 2	; 5
	DELAY();
 186:	00 00       	nop
	PORTD |= CS;  // take cs high
	DELAY();
	PORTD &= ~CLK; // take clk low
	DELAY();
#endif
}
 188:	08 95       	ret

0000018a <displayEnable>:
	
}

void displayEnable(int enable)
{
	if(enable)
 18a:	89 2b       	or	r24, r25
 18c:	19 f0       	breq	.+6      	; 0x194 <displayEnable+0xa>
		displayWriteSixteen(0x0D, (COLOR | PIXEL_FORMAT | SHUTDOWN)); // set configuration word
 18e:	8d e0       	ldi	r24, 0x0D	; 13
 190:	61 ec       	ldi	r22, 0xC1	; 193
 192:	02 c0       	rjmp	.+4      	; 0x198 <displayEnable+0xe>
	else
		displayWriteSixteen(0x0D, (COLOR | PIXEL_FORMAT) & ~SHUTDOWN);
 194:	8d e0       	ldi	r24, 0x0D	; 13
 196:	60 ec       	ldi	r22, 0xC0	; 192
 198:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
 19c:	08 95       	ret

0000019e <displayInit>:
 */

void displayInit()
{
	
	delay_ms(100); // wait for max 6960 to stabilize
 19e:	84 e6       	ldi	r24, 0x64	; 100
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <delay_ms>
	PORTD |= RESET;
 1a6:	5d 9a       	sbi	0x0b, 5	; 11
	
	// configure max 6960
	displayWriteSixteen(0x0E, 0x00); 	// set number of devices to 1
 1a8:	8e e0       	ldi	r24, 0x0E	; 14
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x0F, 0x00); 	// set number of rows to 1
 1b0:	8f e0       	ldi	r24, 0x0F	; 15
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>

	displayWriteSixteen(0x01, 0x03); 	// set pixel intensity scale
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	63 e0       	ldi	r22, 0x03	; 3
 1bc:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x02, 0x10); 	// set panel intensity
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	60 e1       	ldi	r22, 0x10	; 16
 1c4:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x03, 0xFF); 	// set digit 0 intensity
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	6f ef       	ldi	r22, 0xFF	; 255
 1cc:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x04, 0xFF); 	// set digit 1 intensity
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	6f ef       	ldi	r22, 0xFF	; 255
 1d4:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x08, 0x00); 	// set global driver indirect address to zero
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x09, 0x00);	// set display indirect address to zero
 1e0:	89 e0       	ldi	r24, 0x09	; 9
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x0A, 0x00);	// set display indirect address to zero
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x0B, 0x00); 	// set plane to 0, counter to manual
 1f0:	8b e0       	ldi	r24, 0x0B	; 11
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x0D, (COLOR | PIXEL_FORMAT | SHUTDOWN));
 1f8:	8d e0       	ldi	r24, 0x0D	; 13
 1fa:	61 ec       	ldi	r22, 0xC1	; 193
 1fc:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x0E, 0x00); 	// set number of devices to 1
 200:	8e e0       	ldi	r24, 0x0E	; 14
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x0F, 0x00); 	// set number of rows to 1
 208:	8f e0       	ldi	r24, 0x0F	; 15
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	
}
 210:	08 95       	ret

00000212 <uart_putchar>:
/*
 *	Console debug functions
 */

static int uart_putchar(char c, FILE *stream)
{
 212:	1f 93       	push	r17
 214:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
 216:	8a 30       	cpi	r24, 0x0A	; 10
 218:	19 f4       	brne	.+6      	; 0x220 <uart_putchar+0xe>
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	0e 94 09 01 	call	0x212	; 0x212 <uart_putchar>
  
    loop_until_bit_is_set(UCSR0A, UDRE0);
 220:	80 91 c0 00 	lds	r24, 0x00C0
 224:	85 ff       	sbrs	r24, 5
 226:	fc cf       	rjmp	.-8      	; 0x220 <uart_putchar+0xe>
    UDR0 = c;
 228:	10 93 c6 00 	sts	0x00C6, r17
    
    return 0;
}
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	1f 91       	pop	r17
 232:	08 95       	ret

00000234 <uart_getchar>:

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
 234:	80 91 c0 00 	lds	r24, 0x00C0
 238:	87 ff       	sbrs	r24, 7
 23a:	fc cf       	rjmp	.-8      	; 0x234 <uart_getchar>
    return(UDR0);
 23c:	80 91 c6 00 	lds	r24, 0x00C6
}
 240:	08 95       	ret

00000242 <clearBuffer>:
		readEight(high, low, dataPtr+i);
	}
}

void clearBuffer(char* dataPtr)
{
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	for(i = 0; i < 32; ++i)
	{
		*(dataPtr+i) = 0x00;
 246:	fc 01       	movw	r30, r24
 248:	e2 0f       	add	r30, r18
 24a:	f3 1f       	adc	r31, r19
 24c:	10 82       	st	Z, r1
}

void clearBuffer(char* dataPtr)
{
	int i;
	for(i = 0; i < 32; ++i)
 24e:	2f 5f       	subi	r18, 0xFF	; 255
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	20 32       	cpi	r18, 0x20	; 32
 254:	31 05       	cpc	r19, r1
 256:	b9 f7       	brne	.-18     	; 0x246 <clearBuffer+0x4>
	{
		*(dataPtr+i) = 0x00;
	}
}
 258:	08 95       	ret

0000025a <drawFrame>:

void drawFrame(char* dataPtr)
{
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	8c 01       	movw	r16, r24
	displayWriteSixteen(0x09, 0x00);	// set display indirect address to zero
 264:	89 e0       	ldi	r24, 0x09	; 9
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x0A, 0x00);	// set display indirect address to zero
 26c:	8a e0       	ldi	r24, 0x0A	; 10
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	d0 e0       	ldi	r29, 0x00	; 0
	int j;
	for(j = 0; j < 32; ++j)
		displayWriteEight(*(dataPtr+j));
 278:	f8 01       	movw	r30, r16
 27a:	ec 0f       	add	r30, r28
 27c:	fd 1f       	adc	r31, r29
 27e:	80 81       	ld	r24, Z
 280:	0e 94 7e 00 	call	0xfc	; 0xfc <displayWriteEight>
void drawFrame(char* dataPtr)
{
	displayWriteSixteen(0x09, 0x00);	// set display indirect address to zero
	displayWriteSixteen(0x0A, 0x00);	// set display indirect address to zero
	int j;
	for(j = 0; j < 32; ++j)
 284:	21 96       	adiw	r28, 0x01	; 1
 286:	c0 32       	cpi	r28, 0x20	; 32
 288:	d1 05       	cpc	r29, r1
 28a:	b1 f7       	brne	.-20     	; 0x278 <drawFrame+0x1e>
		displayWriteEight(*(dataPtr+j));
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <drawTest>:

void drawTest()
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
	displayWriteSixteen(0x09, 0x00);	// set display indirect address to zero
 29a:	89 e0       	ldi	r24, 0x09	; 9
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
	displayWriteSixteen(0x0A, 0x00);	// set display indirect address to zero
 2a2:	8a e0       	ldi	r24, 0x0A	; 10
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
 2aa:	c0 e0       	ldi	r28, 0x00	; 0
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
	int j;
	for(j = 0; j < 32; ++j)
		displayWriteEight(0x01);
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 7e 00 	call	0xfc	; 0xfc <displayWriteEight>
void drawTest()
{
	displayWriteSixteen(0x09, 0x00);	// set display indirect address to zero
	displayWriteSixteen(0x0A, 0x00);	// set display indirect address to zero
	int j;
	for(j = 0; j < 32; ++j)
 2b4:	21 96       	adiw	r28, 0x01	; 1
 2b6:	c0 32       	cpi	r28, 0x20	; 32
 2b8:	d1 05       	cpc	r29, r1
 2ba:	c9 f7       	brne	.-14     	; 0x2ae <drawTest+0x18>
		displayWriteEight(0x01);
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <splitInteger>:
	*dataPtr = i2c_readNak();                 // read one byte from EEPROM
	i2c_stop();
}

void splitInteger(int in, char* high, char* low)
{
 2c2:	db 01       	movw	r26, r22
 2c4:	fa 01       	movw	r30, r20
	*low = in & 0x00FF;
 2c6:	80 83       	st	Z, r24
	*high = (in & 0xFF00) >> 8;
 2c8:	9c 93       	st	X, r25
}
 2ca:	08 95       	ret

000002cc <readDefaultFrame>:

			break;
		default:	
			break;
	}
}
 2cc:	08 95       	ret

000002ce <readDefaultHeader>:

void readDefaultHeader(int anim)
{
	switch(anim)
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	61 f4       	brne	.+24     	; 0x2ea <readDefaultHeader+0x1c>
	{
		case ANIM_CHARGING:
			numFrames = 19;
 2d2:	83 e1       	ldi	r24, 0x13	; 19
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	90 93 1f 02 	sts	0x021F, r25
 2da:	80 93 1e 02 	sts	0x021E, r24
			fps = 15;			
 2de:	8f e0       	ldi	r24, 0x0F	; 15
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	90 93 21 02 	sts	0x0221, r25
 2e6:	80 93 20 02 	sts	0x0220, r24
 2ea:	08 95       	ret

000002ec <readEight>:
		printf("write failed\n");
	i2c_stop();                             	// set stop conditon = release bus
}

void readEight(char high, char low, char* dataPtr)
{
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	18 2f       	mov	r17, r24
 2f6:	06 2f       	mov	r16, r22
 2f8:	ea 01       	movw	r28, r20
	char ret = 0;
	i2c_start_wait(Dev24LC64+I2C_WRITE);    	// set device address and write mode
 2fa:	80 ea       	ldi	r24, 0xA0	; 160
 2fc:	0e 94 46 04 	call	0x88c	; 0x88c <i2c_start_wait>
	ret = i2c_write(high);            				// write high address = 0
 300:	81 2f       	mov	r24, r17
 302:	0e 94 79 04 	call	0x8f2	; 0x8f2 <i2c_write>
	if(ret == 0x01)
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	21 f4       	brne	.+8      	; 0x312 <readEight+0x26>
		printf("address write (high) failed\n");
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
	ret = i2c_write(low);              				// write address low byte
 312:	80 2f       	mov	r24, r16
 314:	0e 94 79 04 	call	0x8f2	; 0x8f2 <i2c_write>
	if(ret == 0x01)
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	21 f4       	brne	.+8      	; 0x324 <readEight+0x38>
		printf("address write (low) failed\n");
 31c:	8c e1       	ldi	r24, 0x1C	; 28
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
	i2c_rep_start(Dev24LC64+I2C_READ);      // set device address and read mode
 324:	81 ea       	ldi	r24, 0xA1	; 161
 326:	0e 94 6e 04 	call	0x8dc	; 0x8dc <i2c_rep_start>
	*dataPtr = i2c_readNak();                 // read one byte from EEPROM
 32a:	0e 94 95 04 	call	0x92a	; 0x92a <i2c_readNak>
 32e:	88 83       	st	Y, r24
	i2c_stop();
 330:	0e 94 71 04 	call	0x8e2	; 0x8e2 <i2c_stop>
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	08 95       	ret

0000033e <readFrame>:
	readEight(high, low, &tempA);		// frames per second
	fps = tempA;
}

void readFrame(int address, char* dataPtr)
{
 33e:	cf 92       	push	r12
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	df 93       	push	r29
 34c:	cf 93       	push	r28
 34e:	0f 92       	push	r0
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	8c 01       	movw	r16, r24
 356:	f6 2e       	mov	r15, r22
 358:	e7 2e       	mov	r14, r23
	char high, low, temp;
	splitInteger(address, &high, &low);
	readEight(high, low, &temp);					// read frame brightness
 35a:	81 2f       	mov	r24, r17
 35c:	60 2f       	mov	r22, r16
 35e:	ae 01       	movw	r20, r28
 360:	4f 5f       	subi	r20, 0xFF	; 255
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	0e 94 76 01 	call	0x2ec	; 0x2ec <readEight>
	displayWriteSixteen(0x02, temp); 		  // set panel intensity
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	69 81       	ldd	r22, Y+1	; 0x01
 36c:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
 370:	68 01       	movw	r12, r16
 372:	08 94       	sec
 374:	c1 1c       	adc	r12, r1
 376:	d1 1c       	adc	r13, r1
 378:	2f 2d       	mov	r18, r15
 37a:	3e 2d       	mov	r19, r14
 37c:	c9 01       	movw	r24, r18
 37e:	7c 01       	movw	r14, r24
	int i;
	for(i = 0; i < 32; ++i)
 380:	0f 5d       	subi	r16, 0xDF	; 223
 382:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		splitInteger(address+i+1, &high, &low);
		readEight(high, low, dataPtr+i);
 384:	8d 2d       	mov	r24, r13
 386:	6c 2d       	mov	r22, r12
 388:	a7 01       	movw	r20, r14
 38a:	0e 94 76 01 	call	0x2ec	; 0x2ec <readEight>
 38e:	08 94       	sec
 390:	c1 1c       	adc	r12, r1
 392:	d1 1c       	adc	r13, r1
 394:	08 94       	sec
 396:	e1 1c       	adc	r14, r1
 398:	f1 1c       	adc	r15, r1
	char high, low, temp;
	splitInteger(address, &high, &low);
	readEight(high, low, &temp);					// read frame brightness
	displayWriteSixteen(0x02, temp); 		  // set panel intensity
	int i;
	for(i = 0; i < 32; ++i)
 39a:	c0 16       	cp	r12, r16
 39c:	d1 06       	cpc	r13, r17
 39e:	91 f7       	brne	.-28     	; 0x384 <readFrame+0x46>
	{
		splitInteger(address+i+1, &high, &low);
		readEight(high, low, dataPtr+i);
	}
}
 3a0:	0f 90       	pop	r0
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	df 90       	pop	r13
 3b0:	cf 90       	pop	r12
 3b2:	08 95       	ret

000003b4 <__vector_11>:
int currentFrame;
char enableDisplay;

// interrupt service routine
ISR(TIMER1_COMPA_vect)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
	OCR1A=ONE_FPS/fps;  // 1 Hz @ 8 MHz divided by fps
 3d6:	60 91 20 02 	lds	r22, 0x0220
 3da:	70 91 21 02 	lds	r23, 0x0221
 3de:	82 e1       	ldi	r24, 0x12	; 18
 3e0:	9a e7       	ldi	r25, 0x7A	; 122
 3e2:	0e 94 9f 04 	call	0x93e	; 0x93e <__divmodhi4>
 3e6:	70 93 89 00 	sts	0x0089, r23
 3ea:	60 93 88 00 	sts	0x0088, r22
	
	// advance frame counter
	currentFrame++;
 3ee:	80 91 fb 01 	lds	r24, 0x01FB
 3f2:	90 91 fc 01 	lds	r25, 0x01FC
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	90 93 fc 01 	sts	0x01FC, r25
 3fc:	80 93 fb 01 	sts	0x01FB, r24
	if(currentFrame >= numFrames)
 400:	20 91 1e 02 	lds	r18, 0x021E
 404:	30 91 1f 02 	lds	r19, 0x021F
 408:	82 17       	cp	r24, r18
 40a:	93 07       	cpc	r25, r19
 40c:	24 f0       	brlt	.+8      	; 0x416 <__vector_11+0x62>
		currentFrame = 0;
 40e:	10 92 fc 01 	sts	0x01FC, r1
 412:	10 92 fb 01 	sts	0x01FB, r1
		
	// load frame
	readFrame(BASE_ADDR+FRAME_SIZE*currentFrame, buffer);
 416:	20 91 fb 01 	lds	r18, 0x01FB
 41a:	30 91 fc 01 	lds	r19, 0x01FC
 41e:	c9 01       	movw	r24, r18
 420:	45 e0       	ldi	r20, 0x05	; 5
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	4a 95       	dec	r20
 428:	e1 f7       	brne	.-8      	; 0x422 <__vector_11+0x6e>
 42a:	82 0f       	add	r24, r18
 42c:	93 1f       	adc	r25, r19
 42e:	03 96       	adiw	r24, 0x03	; 3
 430:	6e ef       	ldi	r22, 0xFE	; 254
 432:	71 e0       	ldi	r23, 0x01	; 1
 434:	0e 94 9f 01 	call	0x33e	; 0x33e <readFrame>
	
	// update display
	drawFrame(buffer);
 438:	8e ef       	ldi	r24, 0xFE	; 254
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 2d 01 	call	0x25a	; 0x25a <drawFrame>

}
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	7f 91       	pop	r23
 44e:	6f 91       	pop	r22
 450:	5f 91       	pop	r21
 452:	4f 91       	pop	r20
 454:	3f 91       	pop	r19
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <readHeader>:
		writeEight(high, low, *(dataPtr+i));
	}
}

void readHeader(int address)
{
 462:	ef 92       	push	r14
 464:	ff 92       	push	r15
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	df 93       	push	r29
 46c:	cf 93       	push	r28
 46e:	00 d0       	rcall	.+0      	; 0x470 <readHeader+0xe>
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	8c 01       	movw	r16, r24
	char tempA, tempB;
	char high, low;
	splitInteger(address, &high, &low);
	readEight(0x00, address, &tempA);			// number of frames low
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	60 2f       	mov	r22, r16
 47a:	7e 01       	movw	r14, r28
 47c:	08 94       	sec
 47e:	e1 1c       	adc	r14, r1
 480:	f1 1c       	adc	r15, r1
 482:	a7 01       	movw	r20, r14
 484:	0e 94 76 01 	call	0x2ec	; 0x2ec <readEight>
	splitInteger(address+1, &high, &low);
 488:	b8 01       	movw	r22, r16
 48a:	6f 5f       	subi	r22, 0xFF	; 255
 48c:	7f 4f       	sbci	r23, 0xFF	; 255
	readEight(high, low, &tempB);		// number of frames high
 48e:	87 2f       	mov	r24, r23
 490:	ae 01       	movw	r20, r28
 492:	4e 5f       	subi	r20, 0xFE	; 254
 494:	5f 4f       	sbci	r21, 0xFF	; 255
 496:	0e 94 76 01 	call	0x2ec	; 0x2ec <readEight>
	numFrames = tempA + 256*tempB;
 49a:	9a 81       	ldd	r25, Y+2	; 0x02
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	29 81       	ldd	r18, Y+1	; 0x01
 4a0:	82 0f       	add	r24, r18
 4a2:	91 1d       	adc	r25, r1
 4a4:	90 93 1f 02 	sts	0x021F, r25
 4a8:	80 93 1e 02 	sts	0x021E, r24
	splitInteger(address+2, &high, &low);
 4ac:	0e 5f       	subi	r16, 0xFE	; 254
 4ae:	1f 4f       	sbci	r17, 0xFF	; 255
	readEight(high, low, &tempA);		// frames per second
 4b0:	81 2f       	mov	r24, r17
 4b2:	60 2f       	mov	r22, r16
 4b4:	a7 01       	movw	r20, r14
 4b6:	0e 94 76 01 	call	0x2ec	; 0x2ec <readEight>
	fps = tempA;
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	80 93 20 02 	sts	0x0220, r24
 4c0:	10 92 21 02 	sts	0x0221, r1
}
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	cf 91       	pop	r28
 4ca:	df 91       	pop	r29
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	ff 90       	pop	r15
 4d2:	ef 90       	pop	r14
 4d4:	08 95       	ret

000004d6 <writeEight>:
	for(j = 0; j < 32; ++j)
		displayWriteEight(0x01);
}

void writeEight(char high, char low, char data)
{
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	18 2f       	mov	r17, r24
 4de:	06 2f       	mov	r16, r22
 4e0:	f4 2e       	mov	r15, r20
	char ret = 0;
	i2c_start_wait(Dev24LC64+I2C_WRITE);    	// set device address and write mode
 4e2:	80 ea       	ldi	r24, 0xA0	; 160
 4e4:	0e 94 46 04 	call	0x88c	; 0x88c <i2c_start_wait>
	ret = i2c_write(high);            				// write high address = 0
 4e8:	81 2f       	mov	r24, r17
 4ea:	0e 94 79 04 	call	0x8f2	; 0x8f2 <i2c_write>
	if(ret == 0x01)
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	21 f4       	brne	.+8      	; 0x4fa <writeEight+0x24>
		printf("address write (high) failed\n");
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
	ret = i2c_write(low);              				// write address low byte
 4fa:	80 2f       	mov	r24, r16
 4fc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <i2c_write>
	if(ret == 0x01)
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	21 f4       	brne	.+8      	; 0x50c <__stack+0xd>
		printf("address write (low) failed\n");
 504:	8c e1       	ldi	r24, 0x1C	; 28
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
	ret = i2c_write(data);										// write value to EEPROM
 50c:	8f 2d       	mov	r24, r15
 50e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <i2c_write>
	if(ret == 0x01)
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	21 f4       	brne	.+8      	; 0x51e <__stack+0x1f>
		printf("write failed\n");
 516:	87 e3       	ldi	r24, 0x37	; 55
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
	i2c_stop();                             	// set stop conditon = release bus
 51e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <i2c_stop>
}
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	08 95       	ret

0000052a <writeFrame>:
/*
 *	Functions for saving and retrieving frames of animation
 */
 
void writeFrame(int address, char* dataPtr)
{
 52a:	ef 92       	push	r14
 52c:	ff 92       	push	r15
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	7b 01       	movw	r14, r22
 538:	8c 01       	movw	r16, r24
 53a:	c0 e0       	ldi	r28, 0x00	; 0
 53c:	d0 e0       	ldi	r29, 0x00	; 0
	int i;
	for(i = 0; i < 32; ++i)
	{
		char high, low;
		splitInteger(address+i, &high, &low);
		writeEight(high, low, *(dataPtr+i));
 53e:	f7 01       	movw	r30, r14
 540:	ec 0f       	add	r30, r28
 542:	fd 1f       	adc	r31, r29
 544:	81 2f       	mov	r24, r17
 546:	60 2f       	mov	r22, r16
 548:	40 81       	ld	r20, Z
 54a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <writeEight>
 */
 
void writeFrame(int address, char* dataPtr)
{
	int i;
	for(i = 0; i < 32; ++i)
 54e:	21 96       	adiw	r28, 0x01	; 1
 550:	0f 5f       	subi	r16, 0xFF	; 255
 552:	1f 4f       	sbci	r17, 0xFF	; 255
 554:	c0 32       	cpi	r28, 0x20	; 32
 556:	d1 05       	cpc	r29, r1
 558:	91 f7       	brne	.-28     	; 0x53e <writeFrame+0x14>
	{
		char high, low;
		splitInteger(address+i, &high, &low);
		writeEight(high, low, *(dataPtr+i));
	}
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	08 95       	ret

00000568 <serialReadFile>:
    while( !(UCSR0A & (1<<RXC0)) );
    return(UDR0);
}

void serialReadFile()
{
 568:	cf 92       	push	r12
 56a:	df 92       	push	r13
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	df 93       	push	r29
 576:	cf 93       	push	r28
 578:	00 d0       	rcall	.+0      	; 0x57a <serialReadFile+0x12>
 57a:	00 d0       	rcall	.+0      	; 0x57c <serialReadFile+0x14>
 57c:	0f 92       	push	r0
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
	cli();
 582:	f8 94       	cli
	printf("File length (bytes)? ");
 584:	00 d0       	rcall	.+0      	; 0x586 <serialReadFile+0x1e>
 586:	84 e4       	ldi	r24, 0x44	; 68
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	ed b7       	in	r30, 0x3d	; 61
 58c:	fe b7       	in	r31, 0x3e	; 62
 58e:	92 83       	std	Z+2, r25	; 0x02
 590:	81 83       	std	Z+1, r24	; 0x01
 592:	0e 94 c6 04 	call	0x98c	; 0x98c <printf>
 596:	00 e0       	ldi	r16, 0x00	; 0
 598:	10 e0       	ldi	r17, 0x00	; 0
 59a:	0f 90       	pop	r0
 59c:	0f 90       	pop	r0
	char buf[5];
	while(inChar != '\n' && inChar != '\r' && i < 5)
	{
		while( !(UCSR0A & (1<<RXC0)) );
		inChar = UDR0;
		buf[i] = inChar;
 59e:	6e 01       	movw	r12, r28
 5a0:	08 94       	sec
 5a2:	c1 1c       	adc	r12, r1
 5a4:	d1 1c       	adc	r13, r1
	int numBytes = 0;
	int i = 0, j = 1;
	char buf[5];
	while(inChar != '\n' && inChar != '\r' && i < 5)
	{
		while( !(UCSR0A & (1<<RXC0)) );
 5a6:	80 91 c0 00 	lds	r24, 0x00C0
 5aa:	87 ff       	sbrs	r24, 7
 5ac:	fc cf       	rjmp	.-8      	; 0x5a6 <serialReadFile+0x3e>
		inChar = UDR0;
 5ae:	f0 90 c6 00 	lds	r15, 0x00C6
		buf[i] = inChar;
 5b2:	f6 01       	movw	r30, r12
 5b4:	e0 0f       	add	r30, r16
 5b6:	f1 1f       	adc	r31, r17
 5b8:	f0 82       	st	Z, r15
		if(buf[i] > 0x2F && buf[i] < 0x3A)		// make sure we have a digit
 5ba:	8f 2d       	mov	r24, r15
 5bc:	80 53       	subi	r24, 0x30	; 48
 5be:	8a 30       	cpi	r24, 0x0A	; 10
 5c0:	30 f4       	brcc	.+12     	; 0x5ce <serialReadFile+0x66>
		{
			printf("%c", buf[i]);
 5c2:	8f 2d       	mov	r24, r15
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <putchar>
			++i;
 5ca:	0f 5f       	subi	r16, 0xFF	; 255
 5cc:	1f 4f       	sbci	r17, 0xFF	; 255
	printf("File length (bytes)? ");
	char inChar = 0;
	int numBytes = 0;
	int i = 0, j = 1;
	char buf[5];
	while(inChar != '\n' && inChar != '\r' && i < 5)
 5ce:	fa e0       	ldi	r31, 0x0A	; 10
 5d0:	ff 16       	cp	r15, r31
 5d2:	31 f0       	breq	.+12     	; 0x5e0 <serialReadFile+0x78>
 5d4:	4d e0       	ldi	r20, 0x0D	; 13
 5d6:	f4 16       	cp	r15, r20
 5d8:	19 f0       	breq	.+6      	; 0x5e0 <serialReadFile+0x78>
 5da:	05 30       	cpi	r16, 0x05	; 5
 5dc:	11 05       	cpc	r17, r1
 5de:	1c f3       	brlt	.-58     	; 0x5a6 <serialReadFile+0x3e>
 5e0:	fe 01       	movw	r30, r28
 5e2:	e0 0f       	add	r30, r16
 5e4:	f1 1f       	adc	r31, r17
 5e6:	cc 24       	eor	r12, r12
 5e8:	dd 24       	eor	r13, r13
 5ea:	21 e0       	ldi	r18, 0x01	; 1
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	18 c0       	rjmp	.+48     	; 0x620 <serialReadFile+0xb8>

		}
	}
	for(i--; i >= 0; i--)
	{
		numBytes += j*(buf[i] - 0x30);
 5f0:	80 81       	ld	r24, Z
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	c0 97       	sbiw	r24, 0x30	; 48
 5f6:	ac 01       	movw	r20, r24
 5f8:	24 9f       	mul	r18, r20
 5fa:	c0 01       	movw	r24, r0
 5fc:	25 9f       	mul	r18, r21
 5fe:	90 0d       	add	r25, r0
 600:	34 9f       	mul	r19, r20
 602:	90 0d       	add	r25, r0
 604:	11 24       	eor	r1, r1
 606:	c8 0e       	add	r12, r24
 608:	d9 1e       	adc	r13, r25
		j *= 10;
 60a:	c9 01       	movw	r24, r18
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	53 e0       	ldi	r21, 0x03	; 3
 612:	22 0f       	add	r18, r18
 614:	33 1f       	adc	r19, r19
 616:	5a 95       	dec	r21
 618:	e1 f7       	brne	.-8      	; 0x612 <serialReadFile+0xaa>
 61a:	28 0f       	add	r18, r24
 61c:	39 1f       	adc	r19, r25
 61e:	31 97       	sbiw	r30, 0x01	; 1
		} else
		{

		}
	}
	for(i--; i >= 0; i--)
 620:	ec 17       	cp	r30, r28
 622:	fd 07       	cpc	r31, r29
 624:	29 f7       	brne	.-54     	; 0x5f0 <serialReadFile+0x88>
	{
		numBytes += j*(buf[i] - 0x30);
		j *= 10;
	}
	printf("\nWaiting for file");
 626:	00 d0       	rcall	.+0      	; 0x628 <serialReadFile+0xc0>
 628:	8a e5       	ldi	r24, 0x5A	; 90
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	ed b7       	in	r30, 0x3d	; 61
 62e:	fe b7       	in	r31, 0x3e	; 62
 630:	92 83       	std	Z+2, r25	; 0x02
 632:	81 83       	std	Z+1, r24	; 0x01
 634:	0e 94 c6 04 	call	0x98c	; 0x98c <printf>
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	02 c0       	rjmp	.+4      	; 0x642 <serialReadFile+0xda>
	while ( UCSR0A & (1<<RXC0) ) inChar = UDR0; // flush the USART 
 63e:	80 91 c6 00 	lds	r24, 0x00C6
 642:	80 91 c0 00 	lds	r24, 0x00C0
 646:	87 fd       	sbrc	r24, 7
 648:	fa cf       	rjmp	.-12     	; 0x63e <serialReadFile+0xd6>
 64a:	ee 24       	eor	r14, r14
 64c:	ff 24       	eor	r15, r15
 64e:	12 c0       	rjmp	.+36     	; 0x674 <serialReadFile+0x10c>
	char address = 0;
	for(i = 0; i < numBytes; ++i)
	{
		while( !(UCSR0A & (1<<RXC0)) );
 650:	80 91 c0 00 	lds	r24, 0x00C0
 654:	87 ff       	sbrs	r24, 7
 656:	fc cf       	rjmp	.-8      	; 0x650 <serialReadFile+0xe8>
		inChar = UDR0;
 658:	10 91 c6 00 	lds	r17, 0x00C6
		printf(".");
 65c:	8e e2       	ldi	r24, 0x2E	; 46
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 db 04 	call	0x9b6	; 0x9b6 <putchar>
		char high, low;
		splitInteger(address+i, &high, &low);
		writeEight(high, low, inChar);
 664:	8f 2d       	mov	r24, r15
 666:	6e 2d       	mov	r22, r14
 668:	41 2f       	mov	r20, r17
 66a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <writeEight>
		j *= 10;
	}
	printf("\nWaiting for file");
	while ( UCSR0A & (1<<RXC0) ) inChar = UDR0; // flush the USART 
	char address = 0;
	for(i = 0; i < numBytes; ++i)
 66e:	08 94       	sec
 670:	e1 1c       	adc	r14, r1
 672:	f1 1c       	adc	r15, r1
 674:	ec 14       	cp	r14, r12
 676:	fd 04       	cpc	r15, r13
 678:	5c f3       	brlt	.-42     	; 0x650 <serialReadFile+0xe8>
		printf(".");
		char high, low;
		splitInteger(address+i, &high, &low);
		writeEight(high, low, inChar);
	}
	printf("\n");
 67a:	8a e0       	ldi	r24, 0x0A	; 10
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <putchar>
	printf("File received.\n");
 682:	8c e6       	ldi	r24, 0x6C	; 108
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
	sei();
 68a:	78 94       	sei
}
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	cf 91       	pop	r28
 698:	df 91       	pop	r29
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	ff 90       	pop	r15
 6a0:	ef 90       	pop	r14
 6a2:	df 90       	pop	r13
 6a4:	cf 90       	pop	r12
 6a6:	08 95       	ret

000006a8 <main>:
#define DISPLAY_TEST_2 	0
#define DISPLAY_TEST_3	0
#define MEMORY_TEST 	0

int main (void)
{
 6a8:	cf 92       	push	r12
 6aa:	df 92       	push	r13
 6ac:	ef 92       	push	r14
 6ae:	ff 92       	push	r15
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
	fps = 1;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	90 93 21 02 	sts	0x0221, r25
 6c0:	80 93 20 02 	sts	0x0220, r24
	currentFrame = 0;
 6c4:	10 92 fc 01 	sts	0x01FC, r1
 6c8:	10 92 fb 01 	sts	0x01FB, r1
	enableDisplay = 1;
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	80 93 fa 01 	sts	0x01FA, r24
	switch_state = kOff;
 6d2:	10 92 fd 01 	sts	0x01FD, r1

	ioinit(); 		// Setup IO pins and defaults
 6d6:	0e 94 53 00 	call	0xa6	; 0xa6 <ioinit>
	displayInit();		// Initialize MAX6960
 6da:	0e 94 cf 00 	call	0x19e	; 0x19e <displayInit>

	// let us know that the serial port is working
	// and that we are, indeed, awesome.
	printf("Hello, Awesome!!\n");
 6de:	8b e7       	ldi	r24, 0x7B	; 123
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
	drawTest();
	while(1) {}
#endif

	// setup display timer
	TCCR1A = 0x00;
 6e6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (_BV(WGM12) | _BV(CS12));
 6ea:	8c e0       	ldi	r24, 0x0C	; 12
 6ec:	80 93 81 00 	sts	0x0081, r24
	OCR1A = ONE_FPS/fps;
 6f0:	60 91 20 02 	lds	r22, 0x0220
 6f4:	70 91 21 02 	lds	r23, 0x0221
 6f8:	82 e1       	ldi	r24, 0x12	; 18
 6fa:	9a e7       	ldi	r25, 0x7A	; 122
 6fc:	0e 94 9f 04 	call	0x93e	; 0x93e <__divmodhi4>
 700:	70 93 89 00 	sts	0x0089, r23
 704:	60 93 88 00 	sts	0x0088, r22
	TIMSK1 = _BV(OCIE1A);
 708:	82 e0       	ldi	r24, 0x02	; 2
 70a:	80 93 6f 00 	sts	0x006F, r24
#if !DISPLAY_TEST_2
	sei(); // enable interrupts
 70e:	78 94       	sei
#endif

	i2c_init();                             // initialize I2C library
 710:	0e 94 1a 04 	call	0x834	; 0x834 <i2c_init>
 714:	ee ef       	ldi	r30, 0xFE	; 254
 716:	f1 e0       	ldi	r31, 0x01	; 1
void clearBuffer(char* dataPtr)
{
	int i;
	for(i = 0; i < 32; ++i)
	{
		*(dataPtr+i) = 0x00;
 718:	11 92       	st	Z+, r1
}

void clearBuffer(char* dataPtr)
{
	int i;
	for(i = 0; i < 32; ++i)
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	ee 31       	cpi	r30, 0x1E	; 30
 71e:	f8 07       	cpc	r31, r24
 720:	d9 f7       	brne	.-10     	; 0x718 <main+0x70>
	displayEnable(1);

	sei();					// re-enable interrupts

#else
	readHeader(0);
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 31 02 	call	0x462	; 0x462 <readHeader>
	  			}
				else
				{
					printf("Disconnected\n");
				}
				printf("PORTC = %x\n", PORTC);
 72a:	ee ed       	ldi	r30, 0xDE	; 222
 72c:	ee 2e       	mov	r14, r30
 72e:	e1 e0       	ldi	r30, 0x01	; 1
 730:	fe 2e       	mov	r15, r30
		    	else if(inChar == 's')
		    	{
				printf("Device status\n");
    				if(PINC & VBUS)
  				{
	  				printf("Connected");
 732:	09 eb       	ldi	r16, 0xB9	; 185
 734:	11 e0       	ldi	r17, 0x01	; 1
	  				if(!(PINC & CHARGE))
	  				{
	  					printf(" and charging");
 736:	c3 ec       	ldi	r28, 0xC3	; 195
 738:	d1 e0       	ldi	r29, 0x01	; 1
					printf("Enable display\n");
					displayWriteSixteen(0x0D,	(COLOR | PIXEL_FORMAT | SHUTDOWN)); // set configuration word
	    			}
				else
				{
					enableDisplay = 1;
 73a:	cc 24       	eor	r12, r12
 73c:	c3 94       	inc	r12

    		}

		// update and buffer switch state
		if(PORTC & ~SWT)
			switch_state = kSelect;
 73e:	73 e0       	ldi	r23, 0x03	; 3
 740:	d7 2e       	mov	r13, r23
#endif

	while(1)
	{
		// deal with input
		if(UCSR0A & (1<<RXC0))
 742:	80 91 c0 00 	lds	r24, 0x00C0
 746:	87 ff       	sbrs	r24, 7
 748:	68 c0       	rjmp	.+208    	; 0x81a <main+0x172>
		{
			cli(); // disable interrupts
 74a:	f8 94       	cli

			char inChar = UDR0;
 74c:	80 91 c6 00 	lds	r24, 0x00C6

			// triggers data download
			if(inChar == 'r')
 750:	82 37       	cpi	r24, 0x72	; 114
 752:	69 f4       	brne	.+26     	; 0x76e <main+0xc6>
			{
				serialReadFile();
 754:	0e 94 b4 02 	call	0x568	; 0x568 <serialReadFile>
				readHeader(0);
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 31 02 	call	0x462	; 0x462 <readHeader>
				readFrame(4, buffer);
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	6e ef       	ldi	r22, 0xFE	; 254
 766:	71 e0       	ldi	r23, 0x01	; 1
 768:	0e 94 9f 01 	call	0x33e	; 0x33e <readFrame>
 76c:	55 c0       	rjmp	.+170    	; 0x818 <main+0x170>
			}

			// toggles enabling the display
			else if(inChar == 'e')
 76e:	85 36       	cpi	r24, 0x65	; 101
 770:	c1 f4       	brne	.+48     	; 0x7a2 <main+0xfa>
	    		{
		    		// toggle MAX6960 shutdown
		    		if(enableDisplay)
 772:	80 91 fa 01 	lds	r24, 0x01FA
 776:	88 23       	and	r24, r24
 778:	49 f0       	breq	.+18     	; 0x78c <main+0xe4>
				{
					enableDisplay = 0;
 77a:	10 92 fa 01 	sts	0x01FA, r1
					printf("Enable display\n");
 77e:	8c e8       	ldi	r24, 0x8C	; 140
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
					displayWriteSixteen(0x0D,	(COLOR | PIXEL_FORMAT | SHUTDOWN)); // set configuration word
 786:	8d e0       	ldi	r24, 0x0D	; 13
 788:	61 ec       	ldi	r22, 0xC1	; 193
 78a:	08 c0       	rjmp	.+16     	; 0x79c <main+0xf4>
	    			}
				else
				{
					enableDisplay = 1;
 78c:	c0 92 fa 01 	sts	0x01FA, r12
					printf("Disable display\n");
 790:	8b e9       	ldi	r24, 0x9B	; 155
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
	  				displayWriteSixteen(0x0D,	(COLOR | PIXEL_FORMAT) & ~SHUTDOWN);
 798:	8d e0       	ldi	r24, 0x0D	; 13
 79a:	60 ec       	ldi	r22, 0xC0	; 192
 79c:	0e 94 99 00 	call	0x132	; 0x132 <displayWriteSixteen>
 7a0:	3b c0       	rjmp	.+118    	; 0x818 <main+0x170>
				}
			}

		    	// queries device status
		    	else if(inChar == 's')
 7a2:	83 37       	cpi	r24, 0x73	; 115
 7a4:	c9 f5       	brne	.+114    	; 0x818 <main+0x170>
		    	{
				printf("Device status\n");
 7a6:	8b ea       	ldi	r24, 0xAB	; 171
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
    				if(PINC & VBUS)
 7ae:	32 9b       	sbis	0x06, 2	; 6
 7b0:	1b c0       	rjmp	.+54     	; 0x7e8 <main+0x140>
  				{
	  				printf("Connected");
 7b2:	00 d0       	rcall	.+0      	; 0x7b4 <main+0x10c>
 7b4:	ad b7       	in	r26, 0x3d	; 61
 7b6:	be b7       	in	r27, 0x3e	; 62
 7b8:	12 96       	adiw	r26, 0x02	; 2
 7ba:	1c 93       	st	X, r17
 7bc:	0e 93       	st	-X, r16
 7be:	11 97       	sbiw	r26, 0x01	; 1
 7c0:	0e 94 c6 04 	call	0x98c	; 0x98c <printf>
	  				if(!(PINC & CHARGE))
 7c4:	0f 90       	pop	r0
 7c6:	0f 90       	pop	r0
 7c8:	33 99       	sbic	0x06, 3	; 6
 7ca:	09 c0       	rjmp	.+18     	; 0x7de <main+0x136>
	  				{
	  					printf(" and charging");
 7cc:	00 d0       	rcall	.+0      	; 0x7ce <main+0x126>
 7ce:	ed b7       	in	r30, 0x3d	; 61
 7d0:	fe b7       	in	r31, 0x3e	; 62
 7d2:	d2 83       	std	Z+2, r29	; 0x02
 7d4:	c1 83       	std	Z+1, r28	; 0x01
 7d6:	0e 94 c6 04 	call	0x98c	; 0x98c <printf>
 7da:	0f 90       	pop	r0
 7dc:	0f 90       	pop	r0
	  				}
	  				printf("\n");
 7de:	8a e0       	ldi	r24, 0x0A	; 10
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <putchar>
 7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <main+0x148>
	  			}
				else
				{
					printf("Disconnected\n");
 7e8:	81 ed       	ldi	r24, 0xD1	; 209
 7ea:	91 e0       	ldi	r25, 0x01	; 1
 7ec:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <puts>
				}
				printf("PORTC = %x\n", PORTC);
 7f0:	88 b1       	in	r24, 0x08	; 8
 7f2:	00 d0       	rcall	.+0      	; 0x7f4 <main+0x14c>
 7f4:	00 d0       	rcall	.+0      	; 0x7f6 <main+0x14e>
 7f6:	ed b7       	in	r30, 0x3d	; 61
 7f8:	fe b7       	in	r31, 0x3e	; 62
 7fa:	31 96       	adiw	r30, 0x01	; 1
 7fc:	ad b7       	in	r26, 0x3d	; 61
 7fe:	be b7       	in	r27, 0x3e	; 62
 800:	12 96       	adiw	r26, 0x02	; 2
 802:	fc 92       	st	X, r15
 804:	ee 92       	st	-X, r14
 806:	11 97       	sbiw	r26, 0x01	; 1
 808:	82 83       	std	Z+2, r24	; 0x02
 80a:	13 82       	std	Z+3, r1	; 0x03
 80c:	0e 94 c6 04 	call	0x98c	; 0x98c <printf>
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
    			}

			sei(); // re-enable interrupts
 818:	78 94       	sei

    		}

		// update and buffer switch state
		if(PORTC & ~SWT)
 81a:	88 b1       	in	r24, 0x08	; 8
 81c:	8e 7f       	andi	r24, 0xFE	; 254
 81e:	11 f0       	breq	.+4      	; 0x824 <main+0x17c>
			switch_state = kSelect;
 820:	d0 92 fd 01 	sts	0x01FD, r13

		if(switch_state == kSelect)
 824:	80 91 fd 01 	lds	r24, 0x01FD
 828:	83 30       	cpi	r24, 0x03	; 3
 82a:	11 f4       	brne	.+4      	; 0x830 <main+0x188>
			cli();
 82c:	f8 94       	cli
 82e:	89 cf       	rjmp	.-238    	; 0x742 <main+0x9a>
		else
			sei();
 830:	78 94       	sei
 832:	87 cf       	rjmp	.-242    	; 0x742 <main+0x9a>

00000834 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 834:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 838:	8c e0       	ldi	r24, 0x0C	; 12
 83a:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init */
 83e:	08 95       	ret

00000840 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
 840:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 842:	84 ea       	ldi	r24, 0xA4	; 164
 844:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 848:	80 91 bc 00 	lds	r24, 0x00BC
 84c:	87 ff       	sbrs	r24, 7
 84e:	fc cf       	rjmp	.-8      	; 0x848 <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 850:	80 91 b9 00 	lds	r24, 0x00B9
 854:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 856:	88 30       	cpi	r24, 0x08	; 8
 858:	21 f0       	breq	.+8      	; 0x862 <i2c_start+0x22>
 85a:	80 31       	cpi	r24, 0x10	; 16
 85c:	11 f0       	breq	.+4      	; 0x862 <i2c_start+0x22>
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	08 95       	ret

	// send device address
	TWDR = address;
 862:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 866:	84 e8       	ldi	r24, 0x84	; 132
 868:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 86c:	80 91 bc 00 	lds	r24, 0x00BC
 870:	87 ff       	sbrs	r24, 7
 872:	fc cf       	rjmp	.-8      	; 0x86c <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 874:	90 91 b9 00 	lds	r25, 0x00B9
 878:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 87a:	98 31       	cpi	r25, 0x18	; 24
 87c:	11 f4       	brne	.+4      	; 0x882 <i2c_start+0x42>
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	08 95       	ret
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	90 34       	cpi	r25, 0x40	; 64
 886:	09 f0       	breq	.+2      	; 0x88a <i2c_start+0x4a>
 888:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
 88a:	08 95       	ret

0000088c <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 88c:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 88e:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
 890:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 892:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 894:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 898:	80 91 bc 00 	lds	r24, 0x00BC
 89c:	87 ff       	sbrs	r24, 7
 89e:	fc cf       	rjmp	.-8      	; 0x898 <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 8a0:	80 91 b9 00 	lds	r24, 0x00B9
 8a4:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 8a6:	88 30       	cpi	r24, 0x08	; 8
 8a8:	11 f0       	breq	.+4      	; 0x8ae <i2c_start_wait+0x22>
 8aa:	80 31       	cpi	r24, 0x10	; 16
 8ac:	99 f7       	brne	.-26     	; 0x894 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
 8ae:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
 8b2:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 8b6:	80 91 bc 00 	lds	r24, 0x00BC
 8ba:	87 ff       	sbrs	r24, 7
 8bc:	fc cf       	rjmp	.-8      	; 0x8b6 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 8be:	80 91 b9 00 	lds	r24, 0x00B9
 8c2:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 8c4:	80 32       	cpi	r24, 0x20	; 32
 8c6:	11 f0       	breq	.+4      	; 0x8cc <i2c_start_wait+0x40>
 8c8:	88 35       	cpi	r24, 0x58	; 88
 8ca:	39 f4       	brne	.+14     	; 0x8da <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 8cc:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 8d0:	80 91 bc 00 	lds	r24, 0x00BC
 8d4:	84 fd       	sbrc	r24, 4
 8d6:	fc cf       	rjmp	.-8      	; 0x8d0 <i2c_start_wait+0x44>
 8d8:	dd cf       	rjmp	.-70     	; 0x894 <i2c_start_wait+0x8>
 8da:	08 95       	ret

000008dc <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 8dc:	0e 94 20 04 	call	0x840	; 0x840 <i2c_start>

}/* i2c_rep_start */
 8e0:	08 95       	ret

000008e2 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 8e2:	84 e9       	ldi	r24, 0x94	; 148
 8e4:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 8e8:	80 91 bc 00 	lds	r24, 0x00BC
 8ec:	84 fd       	sbrc	r24, 4
 8ee:	fc cf       	rjmp	.-8      	; 0x8e8 <i2c_stop+0x6>

}/* i2c_stop */
 8f0:	08 95       	ret

000008f2 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 8f2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 8f6:	84 e8       	ldi	r24, 0x84	; 132
 8f8:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 8fc:	80 91 bc 00 	lds	r24, 0x00BC
 900:	87 ff       	sbrs	r24, 7
 902:	fc cf       	rjmp	.-8      	; 0x8fc <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 904:	80 91 b9 00 	lds	r24, 0x00B9
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	88 7f       	andi	r24, 0xF8	; 248
 90c:	88 32       	cpi	r24, 0x28	; 40
 90e:	09 f0       	breq	.+2      	; 0x912 <i2c_write+0x20>
 910:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 912:	89 2f       	mov	r24, r25
 914:	08 95       	ret

00000916 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 916:	84 ec       	ldi	r24, 0xC4	; 196
 918:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
 91c:	80 91 bc 00 	lds	r24, 0x00BC
 920:	87 ff       	sbrs	r24, 7
 922:	fc cf       	rjmp	.-8      	; 0x91c <i2c_readAck+0x6>

    return TWDR;
 924:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
 928:	08 95       	ret

0000092a <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 92a:	84 e8       	ldi	r24, 0x84	; 132
 92c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
 930:	80 91 bc 00 	lds	r24, 0x00BC
 934:	87 ff       	sbrs	r24, 7
 936:	fc cf       	rjmp	.-8      	; 0x930 <i2c_readNak+0x6>
	
    return TWDR;
 938:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
 93c:	08 95       	ret

0000093e <__divmodhi4>:
 93e:	97 fb       	bst	r25, 7
 940:	09 2e       	mov	r0, r25
 942:	07 26       	eor	r0, r23
 944:	0a d0       	rcall	.+20     	; 0x95a <__divmodhi4_neg1>
 946:	77 fd       	sbrc	r23, 7
 948:	04 d0       	rcall	.+8      	; 0x952 <__divmodhi4_neg2>
 94a:	0c d0       	rcall	.+24     	; 0x964 <__udivmodhi4>
 94c:	06 d0       	rcall	.+12     	; 0x95a <__divmodhi4_neg1>
 94e:	00 20       	and	r0, r0
 950:	1a f4       	brpl	.+6      	; 0x958 <__divmodhi4_exit>

00000952 <__divmodhi4_neg2>:
 952:	70 95       	com	r23
 954:	61 95       	neg	r22
 956:	7f 4f       	sbci	r23, 0xFF	; 255

00000958 <__divmodhi4_exit>:
 958:	08 95       	ret

0000095a <__divmodhi4_neg1>:
 95a:	f6 f7       	brtc	.-4      	; 0x958 <__divmodhi4_exit>
 95c:	90 95       	com	r25
 95e:	81 95       	neg	r24
 960:	9f 4f       	sbci	r25, 0xFF	; 255
 962:	08 95       	ret

00000964 <__udivmodhi4>:
 964:	aa 1b       	sub	r26, r26
 966:	bb 1b       	sub	r27, r27
 968:	51 e1       	ldi	r21, 0x11	; 17
 96a:	07 c0       	rjmp	.+14     	; 0x97a <__udivmodhi4_ep>

0000096c <__udivmodhi4_loop>:
 96c:	aa 1f       	adc	r26, r26
 96e:	bb 1f       	adc	r27, r27
 970:	a6 17       	cp	r26, r22
 972:	b7 07       	cpc	r27, r23
 974:	10 f0       	brcs	.+4      	; 0x97a <__udivmodhi4_ep>
 976:	a6 1b       	sub	r26, r22
 978:	b7 0b       	sbc	r27, r23

0000097a <__udivmodhi4_ep>:
 97a:	88 1f       	adc	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	5a 95       	dec	r21
 980:	a9 f7       	brne	.-22     	; 0x96c <__udivmodhi4_loop>
 982:	80 95       	com	r24
 984:	90 95       	com	r25
 986:	bc 01       	movw	r22, r24
 988:	cd 01       	movw	r24, r26
 98a:	08 95       	ret

0000098c <printf>:
 98c:	a0 e0       	ldi	r26, 0x00	; 0
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	ec ec       	ldi	r30, 0xCC	; 204
 992:	f4 e0       	ldi	r31, 0x04	; 4
 994:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__prologue_saves__+0x20>
 998:	fe 01       	movw	r30, r28
 99a:	35 96       	adiw	r30, 0x05	; 5
 99c:	61 91       	ld	r22, Z+
 99e:	71 91       	ld	r23, Z+
 9a0:	80 91 24 02 	lds	r24, 0x0224
 9a4:	90 91 25 02 	lds	r25, 0x0225
 9a8:	af 01       	movw	r20, r30
 9aa:	0e 94 17 05 	call	0xa2e	; 0xa2e <vfprintf>
 9ae:	20 96       	adiw	r28, 0x00	; 0
 9b0:	e2 e0       	ldi	r30, 0x02	; 2
 9b2:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__epilogue_restores__+0x20>

000009b6 <putchar>:
 9b6:	60 91 24 02 	lds	r22, 0x0224
 9ba:	70 91 25 02 	lds	r23, 0x0225
 9be:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 9c2:	08 95       	ret

000009c4 <puts>:
 9c4:	0f 93       	push	r16
 9c6:	1f 93       	push	r17
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	8c 01       	movw	r16, r24
 9ce:	e0 91 24 02 	lds	r30, 0x0224
 9d2:	f0 91 25 02 	lds	r31, 0x0225
 9d6:	83 81       	ldd	r24, Z+3	; 0x03
 9d8:	81 ff       	sbrs	r24, 1
 9da:	21 c0       	rjmp	.+66     	; 0xa1e <puts+0x5a>
 9dc:	c0 e0       	ldi	r28, 0x00	; 0
 9de:	d0 e0       	ldi	r29, 0x00	; 0
 9e0:	0d c0       	rjmp	.+26     	; 0x9fc <puts+0x38>
 9e2:	e0 91 24 02 	lds	r30, 0x0224
 9e6:	f0 91 25 02 	lds	r31, 0x0225
 9ea:	20 85       	ldd	r18, Z+8	; 0x08
 9ec:	31 85       	ldd	r19, Z+9	; 0x09
 9ee:	bf 01       	movw	r22, r30
 9f0:	f9 01       	movw	r30, r18
 9f2:	09 95       	icall
 9f4:	89 2b       	or	r24, r25
 9f6:	11 f0       	breq	.+4      	; 0x9fc <puts+0x38>
 9f8:	cf ef       	ldi	r28, 0xFF	; 255
 9fa:	df ef       	ldi	r29, 0xFF	; 255
 9fc:	f8 01       	movw	r30, r16
 9fe:	81 91       	ld	r24, Z+
 a00:	8f 01       	movw	r16, r30
 a02:	88 23       	and	r24, r24
 a04:	71 f7       	brne	.-36     	; 0x9e2 <puts+0x1e>
 a06:	e0 91 24 02 	lds	r30, 0x0224
 a0a:	f0 91 25 02 	lds	r31, 0x0225
 a0e:	20 85       	ldd	r18, Z+8	; 0x08
 a10:	31 85       	ldd	r19, Z+9	; 0x09
 a12:	8a e0       	ldi	r24, 0x0A	; 10
 a14:	bf 01       	movw	r22, r30
 a16:	f9 01       	movw	r30, r18
 a18:	09 95       	icall
 a1a:	89 2b       	or	r24, r25
 a1c:	11 f0       	breq	.+4      	; 0xa22 <puts+0x5e>
 a1e:	cf ef       	ldi	r28, 0xFF	; 255
 a20:	df ef       	ldi	r29, 0xFF	; 255
 a22:	ce 01       	movw	r24, r28
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	08 95       	ret

00000a2e <vfprintf>:
 a2e:	ab e0       	ldi	r26, 0x0B	; 11
 a30:	b0 e0       	ldi	r27, 0x00	; 0
 a32:	ed e1       	ldi	r30, 0x1D	; 29
 a34:	f5 e0       	ldi	r31, 0x05	; 5
 a36:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__prologue_saves__>
 a3a:	3c 01       	movw	r6, r24
 a3c:	2b 01       	movw	r4, r22
 a3e:	5a 01       	movw	r10, r20
 a40:	fc 01       	movw	r30, r24
 a42:	17 82       	std	Z+7, r1	; 0x07
 a44:	16 82       	std	Z+6, r1	; 0x06
 a46:	83 81       	ldd	r24, Z+3	; 0x03
 a48:	81 fd       	sbrc	r24, 1
 a4a:	03 c0       	rjmp	.+6      	; 0xa52 <vfprintf+0x24>
 a4c:	6f ef       	ldi	r22, 0xFF	; 255
 a4e:	7f ef       	ldi	r23, 0xFF	; 255
 a50:	c6 c1       	rjmp	.+908    	; 0xdde <vfprintf+0x3b0>
 a52:	9a e0       	ldi	r25, 0x0A	; 10
 a54:	89 2e       	mov	r8, r25
 a56:	1e 01       	movw	r2, r28
 a58:	08 94       	sec
 a5a:	21 1c       	adc	r2, r1
 a5c:	31 1c       	adc	r3, r1
 a5e:	f3 01       	movw	r30, r6
 a60:	23 81       	ldd	r18, Z+3	; 0x03
 a62:	f2 01       	movw	r30, r4
 a64:	23 fd       	sbrc	r18, 3
 a66:	85 91       	lpm	r24, Z+
 a68:	23 ff       	sbrs	r18, 3
 a6a:	81 91       	ld	r24, Z+
 a6c:	2f 01       	movw	r4, r30
 a6e:	88 23       	and	r24, r24
 a70:	09 f4       	brne	.+2      	; 0xa74 <vfprintf+0x46>
 a72:	b2 c1       	rjmp	.+868    	; 0xdd8 <vfprintf+0x3aa>
 a74:	85 32       	cpi	r24, 0x25	; 37
 a76:	39 f4       	brne	.+14     	; 0xa86 <vfprintf+0x58>
 a78:	23 fd       	sbrc	r18, 3
 a7a:	85 91       	lpm	r24, Z+
 a7c:	23 ff       	sbrs	r18, 3
 a7e:	81 91       	ld	r24, Z+
 a80:	2f 01       	movw	r4, r30
 a82:	85 32       	cpi	r24, 0x25	; 37
 a84:	29 f4       	brne	.+10     	; 0xa90 <vfprintf+0x62>
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	b3 01       	movw	r22, r6
 a8a:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 a8e:	e7 cf       	rjmp	.-50     	; 0xa5e <vfprintf+0x30>
 a90:	98 2f       	mov	r25, r24
 a92:	ff 24       	eor	r15, r15
 a94:	ee 24       	eor	r14, r14
 a96:	99 24       	eor	r9, r9
 a98:	ff e1       	ldi	r31, 0x1F	; 31
 a9a:	ff 15       	cp	r31, r15
 a9c:	d0 f0       	brcs	.+52     	; 0xad2 <vfprintf+0xa4>
 a9e:	9b 32       	cpi	r25, 0x2B	; 43
 aa0:	69 f0       	breq	.+26     	; 0xabc <vfprintf+0x8e>
 aa2:	9c 32       	cpi	r25, 0x2C	; 44
 aa4:	28 f4       	brcc	.+10     	; 0xab0 <vfprintf+0x82>
 aa6:	90 32       	cpi	r25, 0x20	; 32
 aa8:	59 f0       	breq	.+22     	; 0xac0 <vfprintf+0x92>
 aaa:	93 32       	cpi	r25, 0x23	; 35
 aac:	91 f4       	brne	.+36     	; 0xad2 <vfprintf+0xa4>
 aae:	0e c0       	rjmp	.+28     	; 0xacc <vfprintf+0x9e>
 ab0:	9d 32       	cpi	r25, 0x2D	; 45
 ab2:	49 f0       	breq	.+18     	; 0xac6 <vfprintf+0x98>
 ab4:	90 33       	cpi	r25, 0x30	; 48
 ab6:	69 f4       	brne	.+26     	; 0xad2 <vfprintf+0xa4>
 ab8:	41 e0       	ldi	r20, 0x01	; 1
 aba:	24 c0       	rjmp	.+72     	; 0xb04 <vfprintf+0xd6>
 abc:	52 e0       	ldi	r21, 0x02	; 2
 abe:	f5 2a       	or	r15, r21
 ac0:	84 e0       	ldi	r24, 0x04	; 4
 ac2:	f8 2a       	or	r15, r24
 ac4:	28 c0       	rjmp	.+80     	; 0xb16 <vfprintf+0xe8>
 ac6:	98 e0       	ldi	r25, 0x08	; 8
 ac8:	f9 2a       	or	r15, r25
 aca:	25 c0       	rjmp	.+74     	; 0xb16 <vfprintf+0xe8>
 acc:	e0 e1       	ldi	r30, 0x10	; 16
 ace:	fe 2a       	or	r15, r30
 ad0:	22 c0       	rjmp	.+68     	; 0xb16 <vfprintf+0xe8>
 ad2:	f7 fc       	sbrc	r15, 7
 ad4:	29 c0       	rjmp	.+82     	; 0xb28 <vfprintf+0xfa>
 ad6:	89 2f       	mov	r24, r25
 ad8:	80 53       	subi	r24, 0x30	; 48
 ada:	8a 30       	cpi	r24, 0x0A	; 10
 adc:	70 f4       	brcc	.+28     	; 0xafa <vfprintf+0xcc>
 ade:	f6 fe       	sbrs	r15, 6
 ae0:	05 c0       	rjmp	.+10     	; 0xaec <vfprintf+0xbe>
 ae2:	98 9c       	mul	r9, r8
 ae4:	90 2c       	mov	r9, r0
 ae6:	11 24       	eor	r1, r1
 ae8:	98 0e       	add	r9, r24
 aea:	15 c0       	rjmp	.+42     	; 0xb16 <vfprintf+0xe8>
 aec:	e8 9c       	mul	r14, r8
 aee:	e0 2c       	mov	r14, r0
 af0:	11 24       	eor	r1, r1
 af2:	e8 0e       	add	r14, r24
 af4:	f0 e2       	ldi	r31, 0x20	; 32
 af6:	ff 2a       	or	r15, r31
 af8:	0e c0       	rjmp	.+28     	; 0xb16 <vfprintf+0xe8>
 afa:	9e 32       	cpi	r25, 0x2E	; 46
 afc:	29 f4       	brne	.+10     	; 0xb08 <vfprintf+0xda>
 afe:	f6 fc       	sbrc	r15, 6
 b00:	6b c1       	rjmp	.+726    	; 0xdd8 <vfprintf+0x3aa>
 b02:	40 e4       	ldi	r20, 0x40	; 64
 b04:	f4 2a       	or	r15, r20
 b06:	07 c0       	rjmp	.+14     	; 0xb16 <vfprintf+0xe8>
 b08:	9c 36       	cpi	r25, 0x6C	; 108
 b0a:	19 f4       	brne	.+6      	; 0xb12 <vfprintf+0xe4>
 b0c:	50 e8       	ldi	r21, 0x80	; 128
 b0e:	f5 2a       	or	r15, r21
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <vfprintf+0xe8>
 b12:	98 36       	cpi	r25, 0x68	; 104
 b14:	49 f4       	brne	.+18     	; 0xb28 <vfprintf+0xfa>
 b16:	f2 01       	movw	r30, r4
 b18:	23 fd       	sbrc	r18, 3
 b1a:	95 91       	lpm	r25, Z+
 b1c:	23 ff       	sbrs	r18, 3
 b1e:	91 91       	ld	r25, Z+
 b20:	2f 01       	movw	r4, r30
 b22:	99 23       	and	r25, r25
 b24:	09 f0       	breq	.+2      	; 0xb28 <vfprintf+0xfa>
 b26:	b8 cf       	rjmp	.-144    	; 0xa98 <vfprintf+0x6a>
 b28:	89 2f       	mov	r24, r25
 b2a:	85 54       	subi	r24, 0x45	; 69
 b2c:	83 30       	cpi	r24, 0x03	; 3
 b2e:	18 f0       	brcs	.+6      	; 0xb36 <vfprintf+0x108>
 b30:	80 52       	subi	r24, 0x20	; 32
 b32:	83 30       	cpi	r24, 0x03	; 3
 b34:	38 f4       	brcc	.+14     	; 0xb44 <vfprintf+0x116>
 b36:	44 e0       	ldi	r20, 0x04	; 4
 b38:	50 e0       	ldi	r21, 0x00	; 0
 b3a:	a4 0e       	add	r10, r20
 b3c:	b5 1e       	adc	r11, r21
 b3e:	5f e3       	ldi	r21, 0x3F	; 63
 b40:	59 83       	std	Y+1, r21	; 0x01
 b42:	0f c0       	rjmp	.+30     	; 0xb62 <vfprintf+0x134>
 b44:	93 36       	cpi	r25, 0x63	; 99
 b46:	31 f0       	breq	.+12     	; 0xb54 <vfprintf+0x126>
 b48:	93 37       	cpi	r25, 0x73	; 115
 b4a:	79 f0       	breq	.+30     	; 0xb6a <vfprintf+0x13c>
 b4c:	93 35       	cpi	r25, 0x53	; 83
 b4e:	09 f0       	breq	.+2      	; 0xb52 <vfprintf+0x124>
 b50:	56 c0       	rjmp	.+172    	; 0xbfe <vfprintf+0x1d0>
 b52:	20 c0       	rjmp	.+64     	; 0xb94 <vfprintf+0x166>
 b54:	f5 01       	movw	r30, r10
 b56:	80 81       	ld	r24, Z
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	42 e0       	ldi	r20, 0x02	; 2
 b5c:	50 e0       	ldi	r21, 0x00	; 0
 b5e:	a4 0e       	add	r10, r20
 b60:	b5 1e       	adc	r11, r21
 b62:	61 01       	movw	r12, r2
 b64:	01 e0       	ldi	r16, 0x01	; 1
 b66:	10 e0       	ldi	r17, 0x00	; 0
 b68:	12 c0       	rjmp	.+36     	; 0xb8e <vfprintf+0x160>
 b6a:	f5 01       	movw	r30, r10
 b6c:	c0 80       	ld	r12, Z
 b6e:	d1 80       	ldd	r13, Z+1	; 0x01
 b70:	f6 fc       	sbrc	r15, 6
 b72:	03 c0       	rjmp	.+6      	; 0xb7a <vfprintf+0x14c>
 b74:	6f ef       	ldi	r22, 0xFF	; 255
 b76:	7f ef       	ldi	r23, 0xFF	; 255
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x150>
 b7a:	69 2d       	mov	r22, r9
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	42 e0       	ldi	r20, 0x02	; 2
 b80:	50 e0       	ldi	r21, 0x00	; 0
 b82:	a4 0e       	add	r10, r20
 b84:	b5 1e       	adc	r11, r21
 b86:	c6 01       	movw	r24, r12
 b88:	0e 94 ff 06 	call	0xdfe	; 0xdfe <strnlen>
 b8c:	8c 01       	movw	r16, r24
 b8e:	5f e7       	ldi	r21, 0x7F	; 127
 b90:	f5 22       	and	r15, r21
 b92:	14 c0       	rjmp	.+40     	; 0xbbc <vfprintf+0x18e>
 b94:	f5 01       	movw	r30, r10
 b96:	c0 80       	ld	r12, Z
 b98:	d1 80       	ldd	r13, Z+1	; 0x01
 b9a:	f6 fc       	sbrc	r15, 6
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <vfprintf+0x176>
 b9e:	6f ef       	ldi	r22, 0xFF	; 255
 ba0:	7f ef       	ldi	r23, 0xFF	; 255
 ba2:	02 c0       	rjmp	.+4      	; 0xba8 <vfprintf+0x17a>
 ba4:	69 2d       	mov	r22, r9
 ba6:	70 e0       	ldi	r23, 0x00	; 0
 ba8:	42 e0       	ldi	r20, 0x02	; 2
 baa:	50 e0       	ldi	r21, 0x00	; 0
 bac:	a4 0e       	add	r10, r20
 bae:	b5 1e       	adc	r11, r21
 bb0:	c6 01       	movw	r24, r12
 bb2:	0e 94 f4 06 	call	0xde8	; 0xde8 <strnlen_P>
 bb6:	8c 01       	movw	r16, r24
 bb8:	50 e8       	ldi	r21, 0x80	; 128
 bba:	f5 2a       	or	r15, r21
 bbc:	f3 fe       	sbrs	r15, 3
 bbe:	07 c0       	rjmp	.+14     	; 0xbce <vfprintf+0x1a0>
 bc0:	1a c0       	rjmp	.+52     	; 0xbf6 <vfprintf+0x1c8>
 bc2:	80 e2       	ldi	r24, 0x20	; 32
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	b3 01       	movw	r22, r6
 bc8:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 bcc:	ea 94       	dec	r14
 bce:	8e 2d       	mov	r24, r14
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	08 17       	cp	r16, r24
 bd4:	19 07       	cpc	r17, r25
 bd6:	a8 f3       	brcs	.-22     	; 0xbc2 <vfprintf+0x194>
 bd8:	0e c0       	rjmp	.+28     	; 0xbf6 <vfprintf+0x1c8>
 bda:	f6 01       	movw	r30, r12
 bdc:	f7 fc       	sbrc	r15, 7
 bde:	85 91       	lpm	r24, Z+
 be0:	f7 fe       	sbrs	r15, 7
 be2:	81 91       	ld	r24, Z+
 be4:	6f 01       	movw	r12, r30
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	b3 01       	movw	r22, r6
 bea:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 bee:	e1 10       	cpse	r14, r1
 bf0:	ea 94       	dec	r14
 bf2:	01 50       	subi	r16, 0x01	; 1
 bf4:	10 40       	sbci	r17, 0x00	; 0
 bf6:	01 15       	cp	r16, r1
 bf8:	11 05       	cpc	r17, r1
 bfa:	79 f7       	brne	.-34     	; 0xbda <vfprintf+0x1ac>
 bfc:	ea c0       	rjmp	.+468    	; 0xdd2 <vfprintf+0x3a4>
 bfe:	94 36       	cpi	r25, 0x64	; 100
 c00:	11 f0       	breq	.+4      	; 0xc06 <vfprintf+0x1d8>
 c02:	99 36       	cpi	r25, 0x69	; 105
 c04:	69 f5       	brne	.+90     	; 0xc60 <vfprintf+0x232>
 c06:	f7 fe       	sbrs	r15, 7
 c08:	08 c0       	rjmp	.+16     	; 0xc1a <vfprintf+0x1ec>
 c0a:	f5 01       	movw	r30, r10
 c0c:	20 81       	ld	r18, Z
 c0e:	31 81       	ldd	r19, Z+1	; 0x01
 c10:	42 81       	ldd	r20, Z+2	; 0x02
 c12:	53 81       	ldd	r21, Z+3	; 0x03
 c14:	84 e0       	ldi	r24, 0x04	; 4
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	0a c0       	rjmp	.+20     	; 0xc2e <vfprintf+0x200>
 c1a:	f5 01       	movw	r30, r10
 c1c:	80 81       	ld	r24, Z
 c1e:	91 81       	ldd	r25, Z+1	; 0x01
 c20:	9c 01       	movw	r18, r24
 c22:	44 27       	eor	r20, r20
 c24:	37 fd       	sbrc	r19, 7
 c26:	40 95       	com	r20
 c28:	54 2f       	mov	r21, r20
 c2a:	82 e0       	ldi	r24, 0x02	; 2
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	a8 0e       	add	r10, r24
 c30:	b9 1e       	adc	r11, r25
 c32:	9f e6       	ldi	r25, 0x6F	; 111
 c34:	f9 22       	and	r15, r25
 c36:	57 ff       	sbrs	r21, 7
 c38:	09 c0       	rjmp	.+18     	; 0xc4c <vfprintf+0x21e>
 c3a:	50 95       	com	r21
 c3c:	40 95       	com	r20
 c3e:	30 95       	com	r19
 c40:	21 95       	neg	r18
 c42:	3f 4f       	sbci	r19, 0xFF	; 255
 c44:	4f 4f       	sbci	r20, 0xFF	; 255
 c46:	5f 4f       	sbci	r21, 0xFF	; 255
 c48:	e0 e8       	ldi	r30, 0x80	; 128
 c4a:	fe 2a       	or	r15, r30
 c4c:	ca 01       	movw	r24, r20
 c4e:	b9 01       	movw	r22, r18
 c50:	a1 01       	movw	r20, r2
 c52:	2a e0       	ldi	r18, 0x0A	; 10
 c54:	30 e0       	ldi	r19, 0x00	; 0
 c56:	0e 94 36 07 	call	0xe6c	; 0xe6c <__ultoa_invert>
 c5a:	d8 2e       	mov	r13, r24
 c5c:	d2 18       	sub	r13, r2
 c5e:	40 c0       	rjmp	.+128    	; 0xce0 <vfprintf+0x2b2>
 c60:	95 37       	cpi	r25, 0x75	; 117
 c62:	29 f4       	brne	.+10     	; 0xc6e <vfprintf+0x240>
 c64:	1f 2d       	mov	r17, r15
 c66:	1f 7e       	andi	r17, 0xEF	; 239
 c68:	2a e0       	ldi	r18, 0x0A	; 10
 c6a:	30 e0       	ldi	r19, 0x00	; 0
 c6c:	1d c0       	rjmp	.+58     	; 0xca8 <vfprintf+0x27a>
 c6e:	1f 2d       	mov	r17, r15
 c70:	19 7f       	andi	r17, 0xF9	; 249
 c72:	9f 36       	cpi	r25, 0x6F	; 111
 c74:	61 f0       	breq	.+24     	; 0xc8e <vfprintf+0x260>
 c76:	90 37       	cpi	r25, 0x70	; 112
 c78:	20 f4       	brcc	.+8      	; 0xc82 <vfprintf+0x254>
 c7a:	98 35       	cpi	r25, 0x58	; 88
 c7c:	09 f0       	breq	.+2      	; 0xc80 <vfprintf+0x252>
 c7e:	ac c0       	rjmp	.+344    	; 0xdd8 <vfprintf+0x3aa>
 c80:	0f c0       	rjmp	.+30     	; 0xca0 <vfprintf+0x272>
 c82:	90 37       	cpi	r25, 0x70	; 112
 c84:	39 f0       	breq	.+14     	; 0xc94 <vfprintf+0x266>
 c86:	98 37       	cpi	r25, 0x78	; 120
 c88:	09 f0       	breq	.+2      	; 0xc8c <vfprintf+0x25e>
 c8a:	a6 c0       	rjmp	.+332    	; 0xdd8 <vfprintf+0x3aa>
 c8c:	04 c0       	rjmp	.+8      	; 0xc96 <vfprintf+0x268>
 c8e:	28 e0       	ldi	r18, 0x08	; 8
 c90:	30 e0       	ldi	r19, 0x00	; 0
 c92:	0a c0       	rjmp	.+20     	; 0xca8 <vfprintf+0x27a>
 c94:	10 61       	ori	r17, 0x10	; 16
 c96:	14 fd       	sbrc	r17, 4
 c98:	14 60       	ori	r17, 0x04	; 4
 c9a:	20 e1       	ldi	r18, 0x10	; 16
 c9c:	30 e0       	ldi	r19, 0x00	; 0
 c9e:	04 c0       	rjmp	.+8      	; 0xca8 <vfprintf+0x27a>
 ca0:	14 fd       	sbrc	r17, 4
 ca2:	16 60       	ori	r17, 0x06	; 6
 ca4:	20 e1       	ldi	r18, 0x10	; 16
 ca6:	32 e0       	ldi	r19, 0x02	; 2
 ca8:	17 ff       	sbrs	r17, 7
 caa:	08 c0       	rjmp	.+16     	; 0xcbc <vfprintf+0x28e>
 cac:	f5 01       	movw	r30, r10
 cae:	60 81       	ld	r22, Z
 cb0:	71 81       	ldd	r23, Z+1	; 0x01
 cb2:	82 81       	ldd	r24, Z+2	; 0x02
 cb4:	93 81       	ldd	r25, Z+3	; 0x03
 cb6:	44 e0       	ldi	r20, 0x04	; 4
 cb8:	50 e0       	ldi	r21, 0x00	; 0
 cba:	08 c0       	rjmp	.+16     	; 0xccc <vfprintf+0x29e>
 cbc:	f5 01       	movw	r30, r10
 cbe:	80 81       	ld	r24, Z
 cc0:	91 81       	ldd	r25, Z+1	; 0x01
 cc2:	bc 01       	movw	r22, r24
 cc4:	80 e0       	ldi	r24, 0x00	; 0
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	42 e0       	ldi	r20, 0x02	; 2
 cca:	50 e0       	ldi	r21, 0x00	; 0
 ccc:	a4 0e       	add	r10, r20
 cce:	b5 1e       	adc	r11, r21
 cd0:	a1 01       	movw	r20, r2
 cd2:	0e 94 36 07 	call	0xe6c	; 0xe6c <__ultoa_invert>
 cd6:	d8 2e       	mov	r13, r24
 cd8:	d2 18       	sub	r13, r2
 cda:	8f e7       	ldi	r24, 0x7F	; 127
 cdc:	f8 2e       	mov	r15, r24
 cde:	f1 22       	and	r15, r17
 ce0:	f6 fe       	sbrs	r15, 6
 ce2:	0b c0       	rjmp	.+22     	; 0xcfa <vfprintf+0x2cc>
 ce4:	5e ef       	ldi	r21, 0xFE	; 254
 ce6:	f5 22       	and	r15, r21
 ce8:	d9 14       	cp	r13, r9
 cea:	38 f4       	brcc	.+14     	; 0xcfa <vfprintf+0x2cc>
 cec:	f4 fe       	sbrs	r15, 4
 cee:	07 c0       	rjmp	.+14     	; 0xcfe <vfprintf+0x2d0>
 cf0:	f2 fc       	sbrc	r15, 2
 cf2:	05 c0       	rjmp	.+10     	; 0xcfe <vfprintf+0x2d0>
 cf4:	8f ee       	ldi	r24, 0xEF	; 239
 cf6:	f8 22       	and	r15, r24
 cf8:	02 c0       	rjmp	.+4      	; 0xcfe <vfprintf+0x2d0>
 cfa:	1d 2d       	mov	r17, r13
 cfc:	01 c0       	rjmp	.+2      	; 0xd00 <vfprintf+0x2d2>
 cfe:	19 2d       	mov	r17, r9
 d00:	f4 fe       	sbrs	r15, 4
 d02:	0d c0       	rjmp	.+26     	; 0xd1e <vfprintf+0x2f0>
 d04:	fe 01       	movw	r30, r28
 d06:	ed 0d       	add	r30, r13
 d08:	f1 1d       	adc	r31, r1
 d0a:	80 81       	ld	r24, Z
 d0c:	80 33       	cpi	r24, 0x30	; 48
 d0e:	19 f4       	brne	.+6      	; 0xd16 <vfprintf+0x2e8>
 d10:	99 ee       	ldi	r25, 0xE9	; 233
 d12:	f9 22       	and	r15, r25
 d14:	08 c0       	rjmp	.+16     	; 0xd26 <vfprintf+0x2f8>
 d16:	1f 5f       	subi	r17, 0xFF	; 255
 d18:	f2 fe       	sbrs	r15, 2
 d1a:	05 c0       	rjmp	.+10     	; 0xd26 <vfprintf+0x2f8>
 d1c:	03 c0       	rjmp	.+6      	; 0xd24 <vfprintf+0x2f6>
 d1e:	8f 2d       	mov	r24, r15
 d20:	86 78       	andi	r24, 0x86	; 134
 d22:	09 f0       	breq	.+2      	; 0xd26 <vfprintf+0x2f8>
 d24:	1f 5f       	subi	r17, 0xFF	; 255
 d26:	0f 2d       	mov	r16, r15
 d28:	f3 fc       	sbrc	r15, 3
 d2a:	14 c0       	rjmp	.+40     	; 0xd54 <vfprintf+0x326>
 d2c:	f0 fe       	sbrs	r15, 0
 d2e:	0f c0       	rjmp	.+30     	; 0xd4e <vfprintf+0x320>
 d30:	1e 15       	cp	r17, r14
 d32:	10 f0       	brcs	.+4      	; 0xd38 <vfprintf+0x30a>
 d34:	9d 2c       	mov	r9, r13
 d36:	0b c0       	rjmp	.+22     	; 0xd4e <vfprintf+0x320>
 d38:	9d 2c       	mov	r9, r13
 d3a:	9e 0c       	add	r9, r14
 d3c:	91 1a       	sub	r9, r17
 d3e:	1e 2d       	mov	r17, r14
 d40:	06 c0       	rjmp	.+12     	; 0xd4e <vfprintf+0x320>
 d42:	80 e2       	ldi	r24, 0x20	; 32
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	b3 01       	movw	r22, r6
 d48:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 d4c:	1f 5f       	subi	r17, 0xFF	; 255
 d4e:	1e 15       	cp	r17, r14
 d50:	c0 f3       	brcs	.-16     	; 0xd42 <vfprintf+0x314>
 d52:	04 c0       	rjmp	.+8      	; 0xd5c <vfprintf+0x32e>
 d54:	1e 15       	cp	r17, r14
 d56:	10 f4       	brcc	.+4      	; 0xd5c <vfprintf+0x32e>
 d58:	e1 1a       	sub	r14, r17
 d5a:	01 c0       	rjmp	.+2      	; 0xd5e <vfprintf+0x330>
 d5c:	ee 24       	eor	r14, r14
 d5e:	04 ff       	sbrs	r16, 4
 d60:	0f c0       	rjmp	.+30     	; 0xd80 <vfprintf+0x352>
 d62:	80 e3       	ldi	r24, 0x30	; 48
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	b3 01       	movw	r22, r6
 d68:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 d6c:	02 ff       	sbrs	r16, 2
 d6e:	1d c0       	rjmp	.+58     	; 0xdaa <vfprintf+0x37c>
 d70:	01 fd       	sbrc	r16, 1
 d72:	03 c0       	rjmp	.+6      	; 0xd7a <vfprintf+0x34c>
 d74:	88 e7       	ldi	r24, 0x78	; 120
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	0e c0       	rjmp	.+28     	; 0xd96 <vfprintf+0x368>
 d7a:	88 e5       	ldi	r24, 0x58	; 88
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	0b c0       	rjmp	.+22     	; 0xd96 <vfprintf+0x368>
 d80:	80 2f       	mov	r24, r16
 d82:	86 78       	andi	r24, 0x86	; 134
 d84:	91 f0       	breq	.+36     	; 0xdaa <vfprintf+0x37c>
 d86:	01 ff       	sbrs	r16, 1
 d88:	02 c0       	rjmp	.+4      	; 0xd8e <vfprintf+0x360>
 d8a:	8b e2       	ldi	r24, 0x2B	; 43
 d8c:	01 c0       	rjmp	.+2      	; 0xd90 <vfprintf+0x362>
 d8e:	80 e2       	ldi	r24, 0x20	; 32
 d90:	f7 fc       	sbrc	r15, 7
 d92:	8d e2       	ldi	r24, 0x2D	; 45
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	b3 01       	movw	r22, r6
 d98:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 d9c:	06 c0       	rjmp	.+12     	; 0xdaa <vfprintf+0x37c>
 d9e:	80 e3       	ldi	r24, 0x30	; 48
 da0:	90 e0       	ldi	r25, 0x00	; 0
 da2:	b3 01       	movw	r22, r6
 da4:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 da8:	9a 94       	dec	r9
 daa:	d9 14       	cp	r13, r9
 dac:	c0 f3       	brcs	.-16     	; 0xd9e <vfprintf+0x370>
 dae:	da 94       	dec	r13
 db0:	f1 01       	movw	r30, r2
 db2:	ed 0d       	add	r30, r13
 db4:	f1 1d       	adc	r31, r1
 db6:	80 81       	ld	r24, Z
 db8:	90 e0       	ldi	r25, 0x00	; 0
 dba:	b3 01       	movw	r22, r6
 dbc:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 dc0:	dd 20       	and	r13, r13
 dc2:	a9 f7       	brne	.-22     	; 0xdae <vfprintf+0x380>
 dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <vfprintf+0x3a4>
 dc6:	80 e2       	ldi	r24, 0x20	; 32
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	b3 01       	movw	r22, r6
 dcc:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 dd0:	ea 94       	dec	r14
 dd2:	ee 20       	and	r14, r14
 dd4:	c1 f7       	brne	.-16     	; 0xdc6 <vfprintf+0x398>
 dd6:	43 ce       	rjmp	.-890    	; 0xa5e <vfprintf+0x30>
 dd8:	f3 01       	movw	r30, r6
 dda:	66 81       	ldd	r22, Z+6	; 0x06
 ddc:	77 81       	ldd	r23, Z+7	; 0x07
 dde:	cb 01       	movw	r24, r22
 de0:	2b 96       	adiw	r28, 0x0b	; 11
 de2:	e2 e1       	ldi	r30, 0x12	; 18
 de4:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__epilogue_restores__>

00000de8 <strnlen_P>:
 de8:	fc 01       	movw	r30, r24
 dea:	05 90       	lpm	r0, Z+
 dec:	61 50       	subi	r22, 0x01	; 1
 dee:	70 40       	sbci	r23, 0x00	; 0
 df0:	01 10       	cpse	r0, r1
 df2:	d8 f7       	brcc	.-10     	; 0xdea <strnlen_P+0x2>
 df4:	80 95       	com	r24
 df6:	90 95       	com	r25
 df8:	8e 0f       	add	r24, r30
 dfa:	9f 1f       	adc	r25, r31
 dfc:	08 95       	ret

00000dfe <strnlen>:
 dfe:	fc 01       	movw	r30, r24
 e00:	61 50       	subi	r22, 0x01	; 1
 e02:	70 40       	sbci	r23, 0x00	; 0
 e04:	01 90       	ld	r0, Z+
 e06:	01 10       	cpse	r0, r1
 e08:	d8 f7       	brcc	.-10     	; 0xe00 <strnlen+0x2>
 e0a:	80 95       	com	r24
 e0c:	90 95       	com	r25
 e0e:	8e 0f       	add	r24, r30
 e10:	9f 1f       	adc	r25, r31
 e12:	08 95       	ret

00000e14 <fputc>:
 e14:	0f 93       	push	r16
 e16:	1f 93       	push	r17
 e18:	cf 93       	push	r28
 e1a:	df 93       	push	r29
 e1c:	8c 01       	movw	r16, r24
 e1e:	eb 01       	movw	r28, r22
 e20:	8b 81       	ldd	r24, Y+3	; 0x03
 e22:	81 ff       	sbrs	r24, 1
 e24:	1b c0       	rjmp	.+54     	; 0xe5c <fputc+0x48>
 e26:	82 ff       	sbrs	r24, 2
 e28:	0d c0       	rjmp	.+26     	; 0xe44 <fputc+0x30>
 e2a:	2e 81       	ldd	r18, Y+6	; 0x06
 e2c:	3f 81       	ldd	r19, Y+7	; 0x07
 e2e:	8c 81       	ldd	r24, Y+4	; 0x04
 e30:	9d 81       	ldd	r25, Y+5	; 0x05
 e32:	28 17       	cp	r18, r24
 e34:	39 07       	cpc	r19, r25
 e36:	64 f4       	brge	.+24     	; 0xe50 <fputc+0x3c>
 e38:	e8 81       	ld	r30, Y
 e3a:	f9 81       	ldd	r31, Y+1	; 0x01
 e3c:	01 93       	st	Z+, r16
 e3e:	f9 83       	std	Y+1, r31	; 0x01
 e40:	e8 83       	st	Y, r30
 e42:	06 c0       	rjmp	.+12     	; 0xe50 <fputc+0x3c>
 e44:	e8 85       	ldd	r30, Y+8	; 0x08
 e46:	f9 85       	ldd	r31, Y+9	; 0x09
 e48:	80 2f       	mov	r24, r16
 e4a:	09 95       	icall
 e4c:	89 2b       	or	r24, r25
 e4e:	31 f4       	brne	.+12     	; 0xe5c <fputc+0x48>
 e50:	8e 81       	ldd	r24, Y+6	; 0x06
 e52:	9f 81       	ldd	r25, Y+7	; 0x07
 e54:	01 96       	adiw	r24, 0x01	; 1
 e56:	9f 83       	std	Y+7, r25	; 0x07
 e58:	8e 83       	std	Y+6, r24	; 0x06
 e5a:	02 c0       	rjmp	.+4      	; 0xe60 <fputc+0x4c>
 e5c:	0f ef       	ldi	r16, 0xFF	; 255
 e5e:	1f ef       	ldi	r17, 0xFF	; 255
 e60:	c8 01       	movw	r24, r16
 e62:	df 91       	pop	r29
 e64:	cf 91       	pop	r28
 e66:	1f 91       	pop	r17
 e68:	0f 91       	pop	r16
 e6a:	08 95       	ret

00000e6c <__ultoa_invert>:
 e6c:	fa 01       	movw	r30, r20
 e6e:	aa 27       	eor	r26, r26
 e70:	28 30       	cpi	r18, 0x08	; 8
 e72:	51 f1       	breq	.+84     	; 0xec8 <__ultoa_invert+0x5c>
 e74:	20 31       	cpi	r18, 0x10	; 16
 e76:	81 f1       	breq	.+96     	; 0xed8 <__ultoa_invert+0x6c>
 e78:	e8 94       	clt
 e7a:	6f 93       	push	r22
 e7c:	6e 7f       	andi	r22, 0xFE	; 254
 e7e:	6e 5f       	subi	r22, 0xFE	; 254
 e80:	7f 4f       	sbci	r23, 0xFF	; 255
 e82:	8f 4f       	sbci	r24, 0xFF	; 255
 e84:	9f 4f       	sbci	r25, 0xFF	; 255
 e86:	af 4f       	sbci	r26, 0xFF	; 255
 e88:	b1 e0       	ldi	r27, 0x01	; 1
 e8a:	3e d0       	rcall	.+124    	; 0xf08 <__ultoa_invert+0x9c>
 e8c:	b4 e0       	ldi	r27, 0x04	; 4
 e8e:	3c d0       	rcall	.+120    	; 0xf08 <__ultoa_invert+0x9c>
 e90:	67 0f       	add	r22, r23
 e92:	78 1f       	adc	r23, r24
 e94:	89 1f       	adc	r24, r25
 e96:	9a 1f       	adc	r25, r26
 e98:	a1 1d       	adc	r26, r1
 e9a:	68 0f       	add	r22, r24
 e9c:	79 1f       	adc	r23, r25
 e9e:	8a 1f       	adc	r24, r26
 ea0:	91 1d       	adc	r25, r1
 ea2:	a1 1d       	adc	r26, r1
 ea4:	6a 0f       	add	r22, r26
 ea6:	71 1d       	adc	r23, r1
 ea8:	81 1d       	adc	r24, r1
 eaa:	91 1d       	adc	r25, r1
 eac:	a1 1d       	adc	r26, r1
 eae:	20 d0       	rcall	.+64     	; 0xef0 <__ultoa_invert+0x84>
 eb0:	09 f4       	brne	.+2      	; 0xeb4 <__ultoa_invert+0x48>
 eb2:	68 94       	set
 eb4:	3f 91       	pop	r19
 eb6:	2a e0       	ldi	r18, 0x0A	; 10
 eb8:	26 9f       	mul	r18, r22
 eba:	11 24       	eor	r1, r1
 ebc:	30 19       	sub	r19, r0
 ebe:	30 5d       	subi	r19, 0xD0	; 208
 ec0:	31 93       	st	Z+, r19
 ec2:	de f6       	brtc	.-74     	; 0xe7a <__ultoa_invert+0xe>
 ec4:	cf 01       	movw	r24, r30
 ec6:	08 95       	ret
 ec8:	46 2f       	mov	r20, r22
 eca:	47 70       	andi	r20, 0x07	; 7
 ecc:	40 5d       	subi	r20, 0xD0	; 208
 ece:	41 93       	st	Z+, r20
 ed0:	b3 e0       	ldi	r27, 0x03	; 3
 ed2:	0f d0       	rcall	.+30     	; 0xef2 <__ultoa_invert+0x86>
 ed4:	c9 f7       	brne	.-14     	; 0xec8 <__ultoa_invert+0x5c>
 ed6:	f6 cf       	rjmp	.-20     	; 0xec4 <__ultoa_invert+0x58>
 ed8:	46 2f       	mov	r20, r22
 eda:	4f 70       	andi	r20, 0x0F	; 15
 edc:	40 5d       	subi	r20, 0xD0	; 208
 ede:	4a 33       	cpi	r20, 0x3A	; 58
 ee0:	18 f0       	brcs	.+6      	; 0xee8 <__ultoa_invert+0x7c>
 ee2:	49 5d       	subi	r20, 0xD9	; 217
 ee4:	31 fd       	sbrc	r19, 1
 ee6:	40 52       	subi	r20, 0x20	; 32
 ee8:	41 93       	st	Z+, r20
 eea:	02 d0       	rcall	.+4      	; 0xef0 <__ultoa_invert+0x84>
 eec:	a9 f7       	brne	.-22     	; 0xed8 <__ultoa_invert+0x6c>
 eee:	ea cf       	rjmp	.-44     	; 0xec4 <__ultoa_invert+0x58>
 ef0:	b4 e0       	ldi	r27, 0x04	; 4
 ef2:	a6 95       	lsr	r26
 ef4:	97 95       	ror	r25
 ef6:	87 95       	ror	r24
 ef8:	77 95       	ror	r23
 efa:	67 95       	ror	r22
 efc:	ba 95       	dec	r27
 efe:	c9 f7       	brne	.-14     	; 0xef2 <__ultoa_invert+0x86>
 f00:	00 97       	sbiw	r24, 0x00	; 0
 f02:	61 05       	cpc	r22, r1
 f04:	71 05       	cpc	r23, r1
 f06:	08 95       	ret
 f08:	9b 01       	movw	r18, r22
 f0a:	ac 01       	movw	r20, r24
 f0c:	0a 2e       	mov	r0, r26
 f0e:	06 94       	lsr	r0
 f10:	57 95       	ror	r21
 f12:	47 95       	ror	r20
 f14:	37 95       	ror	r19
 f16:	27 95       	ror	r18
 f18:	ba 95       	dec	r27
 f1a:	c9 f7       	brne	.-14     	; 0xf0e <__ultoa_invert+0xa2>
 f1c:	62 0f       	add	r22, r18
 f1e:	73 1f       	adc	r23, r19
 f20:	84 1f       	adc	r24, r20
 f22:	95 1f       	adc	r25, r21
 f24:	a0 1d       	adc	r26, r0
 f26:	08 95       	ret

00000f28 <__prologue_saves__>:
 f28:	2f 92       	push	r2
 f2a:	3f 92       	push	r3
 f2c:	4f 92       	push	r4
 f2e:	5f 92       	push	r5
 f30:	6f 92       	push	r6
 f32:	7f 92       	push	r7
 f34:	8f 92       	push	r8
 f36:	9f 92       	push	r9
 f38:	af 92       	push	r10
 f3a:	bf 92       	push	r11
 f3c:	cf 92       	push	r12
 f3e:	df 92       	push	r13
 f40:	ef 92       	push	r14
 f42:	ff 92       	push	r15
 f44:	0f 93       	push	r16
 f46:	1f 93       	push	r17
 f48:	cf 93       	push	r28
 f4a:	df 93       	push	r29
 f4c:	cd b7       	in	r28, 0x3d	; 61
 f4e:	de b7       	in	r29, 0x3e	; 62
 f50:	ca 1b       	sub	r28, r26
 f52:	db 0b       	sbc	r29, r27
 f54:	0f b6       	in	r0, 0x3f	; 63
 f56:	f8 94       	cli
 f58:	de bf       	out	0x3e, r29	; 62
 f5a:	0f be       	out	0x3f, r0	; 63
 f5c:	cd bf       	out	0x3d, r28	; 61
 f5e:	09 94       	ijmp

00000f60 <__epilogue_restores__>:
 f60:	2a 88       	ldd	r2, Y+18	; 0x12
 f62:	39 88       	ldd	r3, Y+17	; 0x11
 f64:	48 88       	ldd	r4, Y+16	; 0x10
 f66:	5f 84       	ldd	r5, Y+15	; 0x0f
 f68:	6e 84       	ldd	r6, Y+14	; 0x0e
 f6a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f6c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f6e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f70:	aa 84       	ldd	r10, Y+10	; 0x0a
 f72:	b9 84       	ldd	r11, Y+9	; 0x09
 f74:	c8 84       	ldd	r12, Y+8	; 0x08
 f76:	df 80       	ldd	r13, Y+7	; 0x07
 f78:	ee 80       	ldd	r14, Y+6	; 0x06
 f7a:	fd 80       	ldd	r15, Y+5	; 0x05
 f7c:	0c 81       	ldd	r16, Y+4	; 0x04
 f7e:	1b 81       	ldd	r17, Y+3	; 0x03
 f80:	aa 81       	ldd	r26, Y+2	; 0x02
 f82:	b9 81       	ldd	r27, Y+1	; 0x01
 f84:	ce 0f       	add	r28, r30
 f86:	d1 1d       	adc	r29, r1
 f88:	0f b6       	in	r0, 0x3f	; 63
 f8a:	f8 94       	cli
 f8c:	de bf       	out	0x3e, r29	; 62
 f8e:	0f be       	out	0x3f, r0	; 63
 f90:	cd bf       	out	0x3d, r28	; 61
 f92:	ed 01       	movw	r28, r26
 f94:	08 95       	ret

00000f96 <_exit>:
 f96:	f8 94       	cli

00000f98 <__stop_program>:
 f98:	ff cf       	rjmp	.-2      	; 0xf98 <__stop_program>
